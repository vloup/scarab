//  ================================================================
//  Copyright (c) 2000-2005 CollabNet.  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//  
//  1. Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
// 
//  2. Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in the
//  documentation and/or other materials provided with the distribution.
//  
//  3. The end-user documentation included with the redistribution, if
//  any, must include the following acknowlegement: "This product includes
//  software developed by Collab.Net <http://www.Collab.Net/>."
//  Alternately, this acknowlegement may appear in the software itself, if
//  and wherever such third-party acknowlegements normally appear.
//  
//  4. The hosted project names must not be used to endorse or promote
//  products derived from this software without prior written
//  permission. For written permission, please contact info@collab.net.
//  
//  5. Products derived from this software may not use the "Tigris" or 
//  "Scarab" names nor may "Tigris" or "Scarab" appear in their names without 
//  prior written permission of Collab.Net.
//  
//  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
//  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL COLLAB.NET OR ITS CONTRIBUTORS BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
//  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
//  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
//  ====================================================================
//  
//  This software consists of voluntary contributions made by many
//  individuals on behalf of Collab.Net.


package org.tigris.scarab.om;

import java.util.List;
import java.util.HashMap;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.NumberKey;

/** 
 * This class manages RModuleOption objects.  
 * The skeleton for this class was autogenerated by Torque  * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public class RModuleOptionManager
    extends BaseRModuleOptionManager
{
    /**
     * Creates a new <code>RModuleOptionManager</code> instance.
     *
     * @exception TorqueException if an error occurs
     */
    public RModuleOptionManager()
        throws TorqueException
    {
        super();
        validFields = new HashMap();
        validFields.put(RModuleOptionPeer.MODULE_ID, null);
    }

    protected Persistent putInstanceImpl(Persistent om)
        throws TorqueException
    {
        Persistent oldOm = super.putInstanceImpl(om);
        List listeners = (List)listenersMap.get(RModuleOptionPeer.MODULE_ID);
        notifyListeners(listeners, oldOm, om);
        return oldOm;
    }

    public static final RModuleOption getInstance(Integer moduleId,  
        Integer issueTypeId, Integer optionId)
        throws TorqueException
    {
        SimpleKey[] keys = {
            new NumberKey(moduleId.toString()), 
            new NumberKey(issueTypeId.toString()), 
            new NumberKey(optionId.toString())
        };
        return getInstance(new ComboKey(keys));
    }

    public static final RModuleOption getInstance(Module module, 
        IssueType issueType, AttributeOption option)
        throws TorqueException
    {
        SimpleKey[] keys = {
            SimpleKey.keyFor(module.getModuleId()),
            SimpleKey.keyFor(issueType.getIssueTypeId()),
            SimpleKey.keyFor(option.getOptionId())
        };
        return getInstance(new ComboKey(keys));
    }
}
