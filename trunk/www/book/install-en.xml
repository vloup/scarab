<!-- $Id$ -->
<chapter>
	<title>Scarab Installation</title>
	<sect1>
		<title>General</title>
		<sect2>
			<title>How to install Scarab</title>
			<para>In the current state of development -- and maybe in the long term as well -- Scarab does not install fully assembled, as is usually the case with an installation program.</para>
			<para>Scarab is built dynamically for every particular installation, according to local parameters among which the database used to store the issues and other information that Scarab needs to work.</para>
			<para>This could make you anxious at first sight, but the process is simple and proven: you can achieve this task easily like most other people did until now.</para>
		</sect2>
		<sect2>
			<title>The steps in a normal Scarab installation</title>
			<para>A normal installation is performed in four steps :
				<itemizedlist>
					<listitem>
						<para>Preparing the installation</para>
					</listitem>
					<listitem>
						<para>Installing and configuring the database management software</para>
					</listitem>
					<listitem>
						<para>Building Scarab</para>
					</listitem>
					<listitem>
						<para>Building the Scarab database</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>
	<sect1>
		<title>Preparing the installation</title>
		<sect2>
			<title>Choosing an operating system</title>
			<para>Scarab is theoretically portable on any system that supports Java.</para>
			<para>Practically, Scarab has been used and intensively tested on three kinds of platforms:</para>
			<itemizedlist>
				<listitem>
					<para>Linux: the platform on which the most experience has been gathered (and thus the system on which you will easily get support from the user community if ever you face a problem).</para>
				</listitem>
				<listitem>
					<para>Windows</para>
				</listitem>
				<listitem>
					<para>MacOS X: in fact, Scarab has been developed in part on this platform, and the first Scarab demonstrator, the "runbox", was running on this platform.</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2>
			<title>Choosing a database manager</title>
			<para>Scarab needs a database management system to store the issues and other structured information (parameters, queries, reports, modules,...). Thus, you have to choose an RDBMS (for the database installation, see the next chapter).</para>
			<para>Theoretically, you could use Scarab on any RDBMS that has a JDBC driver.</para>
			<para>Practically, you are faced with some SQL compatibility issues, and moreover, you need to have correct support for this DBMS in Torque, the persistence and object-relational mapping component associated with the Turbine framework, on which Scarab is built.</para>
			<sect3>
				<title>DBMS that have been tested with Scarab (and are supported)</title>
				<sect4>
					<title>MySQL</title>
					<para>MySQL is the DBMS on which Scarab has been developed and fully tested. If you don't have any particular reason to choose a database or another to run Scarab, MySQL should be your first choice.</para>
					<para>Which version to choose? Scarab will work with any 3.x or later version of MySQL. It could happen in the future that the support of version 3 could be dropped to use the transactional functionalities that are available only in version 4. So, if you don't have a particular reason to choose a particular version, you may choose long term peace of mind and use a version 4.x or higher from the start.</para>
					<para>MySQL is open-source software, and it is available for free on Linux, Windows and a few other platforms (commercial licences and support are available for a fee).</para>
				</sect4>
				<sect4>
					<title>PostgreSQL</title>
					<para>Scarab has been tested successfully on PostgreSQL, version 7.2.1 and the following.</para>
					<para>PostgreSQL is open-source software, and it is available for free on Linux and Windows.</para>
				</sect4>
				<sect4>
					<title>Oracle 9i</title>
					<para>The compatibility of Scarab 0.20 with Oracle 9i has been tested</para>
					<para>The compatibility of Scarab 0.21 has not been tested, neither with Oracle 9 nor with Oracle 10 (10g or 10 XE). The Scarab development team plans to test and improve the Oracle compatibility in the current version (TRUNK). Feel free to discuss any question you have or any issue you encounter in the mailing lists.</para>
					<para>Because of a problem with the manner Torque manages BLOBs, using Scarab with Oracle 9i is a bit more difficult than with other DBMS (you will have to patch the code generated by Torque).</para>
				</sect4>
			</sect3>
			<sect3>
				<title>DBMS that have been tested and are not (fully) supported by Scarab</title>
				<simpara>The following DBMS have their setup ready in Scarab and have been tested, but the tests have shown so far that Scarab is not fully operational on these platforms:</simpara>
				<itemizedlist>
				  <listitem>
				    <simpara>Microsoft SQL Server<footnote><simpara>Problems remain with the use of the SQL CONCAT function and in the mapping of certain types by Torque.</simpara></footnote></simpara>
				  </listitem>
				  <listitem><simpara>HSQLDB</simpara></listitem>
				  <listitem><simpara>DB2</simpara></listitem>
				</itemizedlist>
				<simpara>Moreover:</simpara>
				<itemizedlist>
				  <listitem><simpara>Apache Derby has been quickly tested recently; though it does not work at the moment, further testing is planned.</simpara></listitem>
				  <listitem><simpara>Oracle 8i has been supported in the early versions of Scarab but is no longer supported (and will not be supported again)<footnote><simpara>Unless someone volunteers but it is a tough problem with <emphasis>right outer joins</emphasis>.</simpara></footnote>.</simpara></listitem>
				</itemizedlist>
			</sect3>
		</sect2>
		<sect2>
			<title>Choosing a servlet container</title>
			<para>Scarab runs on any Servlet 2.3-compatible servlet engine; in fact, a patch could make Scarab compatible with 2.2 servlet engines, among which WebSphere Application Server 4.0 -- but this has not been tested for a very long time.</para>
			<para>Practically, most Scarab users use it on Tomcat; in fact, the Scarab installation process builds a "light" Tomcat server, the &quot;sandbox&quot;, which you can use to test or run Scarab once it has been built.</para>
			<para>You may want to deploy Scarab on an existing Tomcat installation; Resin has also been successfully tested as Scarab engine.</para>
			<para>Deploying Scarab on &quot;full&quot; J2EE application servers has usually been tricky and has rarely worked. Recent tests have shown at least that it does not work &quot;out of the box&quot; neither on JBoss<footnote><simpara>Most probably there is at least a problem with the log4j settings.</simpara></footnote> nor on WebLogic Server.</para>
		</sect2>
		<sect2>
			<title>Gathering the other elements required for the Scarab installation</title>
			<para>To perform the Scarab installation, you will need three more things: a Java SDK, Maven and -- of course -- Scarab itself.</para>
			<sect3>
				<title>Download and install a Java SDK</title>
				<para>If you don't have a Java SDK handy (pre-installed on some systems such as MacOS X or certain Linux distributions), you need to download and install one. Be careful: you need a Java 2 SDK and not only a JRE (Java Runtime Environment) because you will need to compile Scarab.</para>
				<para>The SDK version must be at least 1.4.</para>
				<para>You may download a Java SDK from <ulink url="http://java.sun.com">http://java.sun.com</ulink>.</para>
				<para>Make sure the JAVA_HOME environment variable correctly points to the directory in which your SDK is installed.</para>
			</sect3>
			<sect3>
				<title>Download and install Maven</title>
				<para>To build Scarab, you will need the Maven build system.</para>
				<para>You can download Maven from <ulink url="http://maven.apache.org">http://maven.apache.org</ulink>.</para>
				<para>The Maven version should be 3.0.3 or greater.</para>
				<para>Make sure the MAVEN_HOME environment variable correctly points to the directory in which Maven is installed</para>
			</sect3>
			<sect3>
				<title>Download Scarab</title>
				<para>You need of course to download Scarab itself. You will find the latest version (1.0.23) at the following URL: <ulink url="http://scarab.tigris.org/servlets/ProjectDocumentList">http://scarab.tigris.org/servlets/ProjectDocumentList</ulink>.</para>
			</sect3>
		</sect2>
	</sect1>
	<sect1>
	  <title>Setting up and configuring your database for Scarab</title>
	  <sect2>
		<title>Configuring MySQL</title>
			<sect3>
				<title>Grab the MySQL distribution</title>
				<simpara>You will find an appropriate distribution through the <ulink url="http://www.mysql.com">MySQL website</ulink>.</simpara>
				<simpara>You should follow the instructions from the MySQL documentation. In this documentation you will find Scarab dependent info only. It is assumed you want to run the MySQL database and scarab on the same host namely 'localhost'. Adapt this to your needs.</simpara>
			</sect3>
			<sect3>
				<title>Check the /etc/hosts file (unix only)</title>
				<simpara>If you plan to run MySQL on localhost, you must check the corresponding entry in your /etc/hosts file. We have seen problems when the localhost entry is defined as in the following example:</simpara>
				<informalexample>
					<programlisting>
127.0.0.1    localhost.localdomain localhost   (seen on debian)
127.0.0.1    linux localhost                   (seen on Suse)
            </programlisting>
				</informalexample>
				<simpara>If you see similar entries, revert the order so that "localhost" appears first:</simpara>
				<informalexample>
					<programlisting>
127.0.0.1    localhost localhost.localdomain    (seen on debian)
127.0.0.1    localhost linux                    (seen on Suse)
            </programlisting>
				</informalexample>
				<simpara>You may need to reboot. Although I am not sure about this. After reboot, ensure that your operating system has not manipulated the entry in your /etc/hosts file. I have no idea what to do if this happens... (FIXME: add a recipe for this situation)
</simpara>
			</sect3>
			<sect3>
				<title>Add the admin user for Scarab</title>
				<simpara>We choose <emphasis>admin</emphasis> as administrator using the password <emphasis>secret</emphasis> and furthermore we choose the database name to be <emphasis>scarab</emphasis>. Of course you can take your own choice. </simpara>
				<informalexample>
					<programlisting>
     grant all on scarab.* to admin@localhost identified by 'secret';
     grant grant option on scarab.* to admin@localhost;
     grant all on mysql.* to admin@localhost;
            </programlisting>
				</informalexample>
				<note>
					<simpara>You need the second statement because the admin user will eventually create the runtime database user! (see below) The term <computeroutput>grant grant option</computeroutput> above is definitely correct! You also will need the third statement because your scarab user uses a password for identification. In order to be able to make the  appropriate settings, the admin needs access to the mysql control tables.</simpara>
				</note>
				<note>
					<simpara>You will need ALL choices above later to add them to the {{build.properties}} of Scarab.</simpara>
				</note>
			</sect3>
			<sect3>
				<title>Test the settings</title>
				<caution>
					<simpara>This step is for safety only. It is NOT required for the Scarab setup, but doing so ensures that your privilege settings for the Scarab administration user are correct and work as needed.</simpara>
				</caution>
				<simpara>OK, now open a new shell and try to create a database from the admin user:</simpara>
				<informalexample>
					<programlisting>
mysqladmin -u admin -h localhost -p create scarab
Enter password: ******
            </programlisting>
				</informalexample>
				<simpara>Now you have created your scarab database, though it's empty. If the database was already there you would have received an appropriate error message. In that case don't proceed until you have checked where this database came from.</simpara>
			</sect3>
			</sect2>
			<sect2>
				  <title>Configuring PostgreSQL</title>
				  <simpara>
					Due to a problem in the database persistence framework we use, Scarab
					will not work &quot;out-of-the-box&quot; with PostgreSQL. Fortunately, there is
					a simple script that you can run which will create a work-around.
				  </simpara>
				  <simpara>
					This script must be run by a user with sufficient privileges, which
					generally means the user that originally created and initialised the
					PostgreSQL database. Typically this user will be 'postgres'.
				  </simpara>
				  <simpara>
					The script can be found at <computeroutput>src/sql/postgresql/hack-db.sql</computeroutput> in the
					distribution, and it can be executed in different ways, for example
					from the command line:
				  </simpara>
				  <informalexample>
					<programlisting>postgres&gt; psql scarab &lt; hack-db.sql</programlisting>
				  </informalexample>
				  <simpara>
					where 'scarab' is the name of the Scarab database, and 'postgres' is
					the &quot;system&quot; postgreSQL user. Alternatively, from the psql interactive
					console:
				  </simpara>
				  <informalexample>
					<programlisting>scarab=&gt; \i hack-db.sql</programlisting>
				  </informalexample>
			</sect2>
					<sect2>
		  <title>Setting up and configuring Oracle</title>
		  <sect3>
		    <title>Getting the JDBC drivers</title>
		    <simpara>For licence reasons, the jar containing the Oracle JDBC driver is not included in the Scarab distribution.</simpara>
		    <simpara>You will have to get it yourself from your Oracle distribution (or from Oracle Technology Network: <ulink url="http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html">http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html</ulink>). Unless you have a compelling reason to do otherwise, you should take the latest drivers: they are compatible with older releases of Oracle but are much faster than the older drivers.</simpara>
		    <simpara>The jar you need is probably named <computeroutput>classes12.jar</computeroutput> (for JDK 1.2 and 1.3) or <computeroutput>ojdbc14.jar</computeroutput> (for JDK 1.4 and 1.5). Copy this jar to the <computeroutput>$SCARAB/lib</computeroutput> directory (i.e., the lib directory directly at the root of your Scarab distribution. In a fresh installation of Scarab, this directory is probably empty, except for a README file. This is normal, it is populated during the build process.</simpara>
		  </sect3>
		  <sect3>
		    <title>Configuring access to your Oracle database</title>
		    <simpara>In the <computeroutput>build.properties</computeroutput> file you will prepare during build, you will need to configure the access to your Oracle database.</simpara>
		    <informalexample>
		      <programlisting>
scarab.database.host=localhost
scarab.database.port=
scarab.database.url=
scarab.database.admin.url=
scarab.database.type=oracle
scarab.database.jdbc.driver=oracle.jdbc.driver.OracleDriver
scarab.database.username=scarab
scarab.database.password=secret
scarab.database.admin.username=scott
scarab.database.admin.password=tiger
		      </programlisting>
		    </informalexample>
		  </sect3>
		  <sect3>
		    <title>Solving a problem with LOBs</title>
		    <simpara>To use Large OBjects (LOBs), such as BLOBs (Binary Large OBjects) and CLOBs (Character Large OBjects) you need to instantiate Oracle classes (not JDBC generic classes) and the current version of the persistance layer we use, Torque, does not allow to do that at the moment. A workaround is to use large VARCHARs instead. To change this, you will need to patch the <computeroutput>webapps/scarab/WEB-INF/sql/turbine.sql</computeroutput> after building Scarab (see next section), replacing <computeroutput>BLOB</computeroutput> by <computeroutput>VARCHAR2(4000)</computeroutput><footnote><simpara>You can as well edit <computeroutput>webapps/scarab/WEB-INF/src/torque/templates/sql/base/oracle/db.props</computeroutput> and change <computeroutput>VARBINARY = BLOB</computeroutput> to <computeroutput>VARBINARY = VARCHAR2(4000)</computeroutput> -- that is a slightly more persistent modification.</simpara></footnote></simpara>
		  </sect3>
		  <sect3>
		    <title>Using Oracle 10g XE on the same machine as Scarab</title>
		    <simpara>A word of caution if you plan to use Scarab on the same machine as Oracle 10g XE. Both Scarab and the Oracle administration web app listen by default on the same port (8080), which will cause a conflict.</simpara>
		    <simpara>To configure Scarab to listen on a different port, change the <computeroutput>scarab.http.port</computeroutput> property to a value you choose and edit the <computeroutput>./tomcat/conf.server.xml</computeroutput> file to configure Tomcat to listen to a different port.</simpara>
		    <simpara>To change the port on which the Oracle administration web app listens, consult the Oracle 10g XE documentation.</simpara>
		  </sect3>
		</sect2>
			</sect1>
<sect1>
				<title>Simple Scarab build</title>
	<sect2>
				<title>Configure Scarab</title>
				<simpara>Make a copy of minimal.properties (or project.properties) and name it build.properties. You will need to define a runtime database user for your instance now. Let's choose "scarab" as username and "baracs" as password. These two properties will be needed now in addition to the admin user created (just keep them in mind for a minute).</simpara>
				<simpara>Now edit build.properties according your special needs. For database settings the following properties are important:</simpara>
				<informalexample>
					<programlisting>
scarab.database.username=scarab       #changed from **GENERATED**
scarab.database.password=baracs       #changed from **GENERATED**    
scarab.database.admin.username=admin  #changed from **GENERATED**
scarab.database.admin.password=secret #changed from **GENERATED**    
scarab.database.host=localhost        #unchanged
scarab.database.name=scarab           #unchanged
          </programlisting>
				</informalexample>
				<simpara>There are other relevant database specific properties, but usually they are generated from the above settings. Two more additional properties you should take care of are:</simpara>
				<informalexample>
					<programlisting>
scarab.database.type=mysql            #unchanged
scarab.database.port=**GENERATED**    #unchanged
          </programlisting>
				</informalexample>
				<simpara>The first one is set to mysql by default and the last one is set to the standard port 3306 used by MySQL for the connection peer.</simpara>
				<simpara>The properties for username and password are later used to automatically create an additional user for Scarab. Don't bother yourself with setting up other users except the admin user!</simpara>
				<simpara>There are several more properties you can think of here, except database settings. You may have a look at Scarab's peoperty guide for more informations.</simpara>
			</sect2>
			<sect2>
		  <title>Understanding and setting up NTLM authentication</title>
		  <abstract>
		    <simpara>NTLM authentication provides automatic login (Single Sign-On) in Windows NT domains. It is only useful in carefully controlled and administered environments, it requires some additional setup, so if you don't plan to use this feature, you may (you should) skip this section.</simpara>
		  </abstract>
		  <sect3>
		    <title>Understanding NTLM authentication in Scarab</title>
		    <simpara>
		      This development is intended to provide the means for automatic login on
              Windows networks. Initially based on code provided by Peter Nei (thanks!),
              current implementation is mostly based on JCIFS (see note at the end of this doc).
            </simpara>
            <simpara>
              It's implemented as a new valve in the pipeline (NtlmLoginValve), that
              will try to get the credentials from the browser using the ntlm challenge
              protocol.
            </simpara>
            <simpara>The credentials sent by the browser are not trusted directly, and they're authenticated in a NTLM domain.</simpara>
            <simpara>
              Given that feature is not automatically cross-browser (it needs some config tweaks in Firefox, and it's not
              guaranteed to work on every browser), it might only makes sense in controlled network environments.
            </simpara>
            <sect4>
              <title>Behaviour</title>
              <simpara>The NTLM login will be inactive by default, and it will be activated using two Scarab properties:</simpara>
              <simpara><computeroutput>scarab.login.ntlm.active=true|false</computeroutput></simpara>
              <simpara>The setting of this property to <computeroutput>true</computeroutput> will require the authentication domain to be defined.</simpara>
              <simpara><computeroutput>scarab.login.ntlm.domain=mydomaincontroller</computeroutput></simpara>
              <simpara>
                When browsing, the NTLMLoginValve will try to get the credentials and
                validate them against the NTLM domain.
                If they are valid. it will try logging in the user into Scarab.
                <emphasis role="bold">For this to succeed, the NTLM usename must match an Scarab username.</emphasis>
                If the user gets logged in, a message will be displayed, such as</simpara>
                <informalexample>
                  <programlisting>
                     You've been automatically logged in using your user 'YourUser' from domain 'YourDomain'."
                  </programlisting>
                </informalexample>
                <simpara>
                  If anyone from the NTLM credentials or its equivalent Scarab username are invalid, the valve will
                  just 'pass' and the rest of the login system will proceed (Login form / Anonymous).
                </simpara>
                <simpara>
                  When an authenticated user (even Anonymous) click on the 'Logout/Login' link, the session will be
                  terminated and the Login.vm screen will be displayed, so any user (NTLM or
                  not) can try logging in the system with other credentials.
                </simpara>
            </sect4>
            <sect4>
              <title>Single-Sign-On behaviour</title>
              <simpara>
                User are still able to login using the old form, and this causes a 
                problem because Scarab and NTLM passwords will not be synchronized.
              </simpara>
              <simpara>Possible solutions:</simpara>
              <orderedlist>
                <listitem>
                  <simpara>Disable form-login: This would be a problem if some users are not to be in the Windows domain.</simpara>
                </listitem>
                <listitem>
                  <simpara>
                    Use a UserPreference to choose between NTLM and form login for every user. This would effectively restrict
                    any user to only one authentication method, be Scarab or NTLM, but it would add another administration task.
                    password in Scarab, the NTLM PASSWORD WILL NOT CHANGE, and neither .
                    Similarly, the Windows domain can revoke or
                  </simpara>
                </listitem>
              </orderedlist>
            </sect4>
            <sect4>
              <title>Login precedences</title>
              <simpara>The different login methods allowed will be selected in this order:</simpara>
              <orderedlist>
                <listitem><simpara>Login form will always take precedence on others.</simpara></listitem>
                <listitem><simpara>If the login-form has not been used, the system will try NTLM authentication (if activated!)</simpara></listitem>
                <listitem><simpara>Anonymous login will be granted if allowed.</simpara></listitem>
              </orderedlist>
            </sect4>
            <sect4>
              <title>Firefox</title>
              <simpara>
                Firefox users will be by default prompted with a dialog box asking for
                username and password. To login with Windows domain credentials, the user will have to fill them up using the DOMAIN\User format.
              </simpara>
              <simpara>Example: Username: "MyDomain\mywindowsuser", Password: myplainpassword</simpara>
              <simpara>
                If Firefox users want to automatically (no dialog!) get the credentials fed from the underlaying Windows
                operating system, they have to:</simpara>
                <itemizedlist>
                  <listitem><simpara>Type "about:config" in the URL box.</simpara></listitem>
                  <listitem><simpara>Search for the 'network.automatic-ntlm-auth.trusted-uris' configuration value.</simpara></listitem>
                  <listitem><simpara>Add the name of the Scarab host to that value.</simpara></listitem>
                </itemizedlist>
            </sect4>
            <sect4>
              <title>Other browsers</title>
              <simpara>The feature has not been tested on other browsers. At least, they would probably offer the dialog asking for username and password, but it may vary.</simpara>
            </sect4>
		  </sect3>
		  <sect3>
		    <title>Preparing Scarab for NTLM authentication</title>
		    <abstract><simpara>You have to perform some library setup before building Scarab; that is why this lengthy thread about NTLM authentication took place here.</simpara></abstract>
		    <sect4>
		      <title>jcifs</title>
		      <simpara>To perform NTLM authentication, Scarab relies on the jcifs library, part of the Samba project (<ulink url="http://jcifs.samba.org">http://jcifs.samba.org</ulink>).</simpara>
		      <simpara>The license of jcifs is LGPL, so  the jar cannot be included in the Scarab distribution.</simpara>
		      <simpara>
		        Some Apache projects (Lenya) have been using jcifs, providing a <emphasis role="bold">mock jar</emphasis> to allow compiling and asking the administrator to manually download the (real) jar.
		        This method fits Scarab too, so you will have to download jcifs yourself from one of these URls:</simpara>
		        <itemizedlist>
		          <listitem><simpara><ulink url="http://jcifs.samba.org/">http://jcifs.samba.org/</ulink></simpara></listitem>
		          <listitem><simpara><ulink url="http://www.ibiblio.org/maven/org.samba.jcifs/jars/jcifs-1.2.6.jar">http://www.ibiblio.org/maven/org.samba.jcifs/jars/jcifs-1.2.6.jar</ulink></simpara></listitem>
		        </itemizedlist>
		        <simpara>
		          Once you have got the jar file, you must replace the jar that was delivered with Scarab.
		          Be aware that if you are using Maven, you have possibly already got the mock version in your local Maven repository (usually at $HOME/.maven/repository/org.samba.jcifs/jars).
		        </simpara>
		        <warning><simpara>You must replace the (mock) jar with the real jar you have downloaded.</simpara></warning>
		    </sect4>
		  </sect3>
		</sect2>
			<sect2>
				<title>Build Scarab</title>
				<simpara>Go to the build directory and launch ant</simpara>
				<informalexample>
					<programlisting>
    mvn clean compile
            </programlisting>
				</informalexample>
				<simpara>This command simply compiles the source code. Run the following command to get a WAR file for Scarab:</simpara>
				<informalexample>
					<programlisting>
    mvn clean package
            </programlisting>
				</informalexample>
				<simpara>The compiled and archived output should be found in <computeroutput>/target</computeroutput> directory of Scarab.</simpara>
			</sect2>
			<sect2>
				<title>Rebuild Scarab after failure</title>
				<simpara>The whole property settings have been copied from the build environment, thus the configuration may be invalid. In order to fix this you must regenerate the configuration (not the class files!).</simpara>
				<simpara>But definitely the safest way to proceed is simply rebuilding everything:</simpara>
				<informalexample>
					<programlisting>
	mvn clean package
            </programlisting>
				</informalexample>
			</sect2>
			<sect2>
				<title>Build database</title>
				<warning>
					<simpara>ONLY IF YOU'RE NOT MIGRATING AN EXISTING INSTANCE OF SCARAB !!</simpara>
				</warning>
				<sect3>
				<title>Default database</title>
				<simpara>Run the following command to build Scarab's deafult database including all default and sample data:</simpara>
				<informalexample>
					<programlisting>
    mvn initialize scarab:create-db
            </programlisting>
				</informalexample>
			    </sect3>
				<sect3>
				<title>JIRA templates</title>
				<simpara>
				  To import some issue-types that match the
                  structure of JIRA, build the Scarab database and run the following command.
                </simpara>
				<informalexample>
					<programlisting>
    mvn initialize scarab:import-jira-templates
            </programlisting>
				</informalexample>
				<note>
					<simpara>This option is not independent of 'scarab.database.build.mode'. You have to install the default data as well.</simpara>
				</note>
				</sect3>
				<sect3>
				<title>Sample data</title>
				<simpara>
				  By default, only basic data are put into Scarab's database. There are no
				  modules and no already entered issues. You may want to avoid this e.g. for presentation or tests. If so
                 you can pass the option "scarab.database.build.mode" to Maven. To import all 
				 default global data, too, as there are some attributes, issue-types and so on,
				 pass the option like this:
                </simpara>
				<informalexample>
					<programlisting>
    mvn initialize scarab:create-db -Dscarab.database.build.mode=default
            </programlisting>
				</informalexample>
				<simpara>
				or use "sample" as value for "scarab.database.build.mode" to import some sample moudles and stuff, too.
				</simpara>
				</sect3>				
			</sect2>
			<sect2>
				<title>Troubleshooting</title>
				<sect3>
					<title>Last resort (applies to some linux distros)</title>
					<para>
                      If nothing helps, check this (thanks to Josh Howe for investigation).
                      MySQL Connector/J can only communicate with MySQL using TCP/IP, as Java
                      does not support Unix domain sockets. TCP/IP communication with MySQL
                      may be affected if MySQL was started with the "--skip-networking"
                      flag or if it is firewalled.
                    </para>
					<para>
					  If MySQL has been started with the "--skip-networking" option set (the
                      Debian Linux package of MySQL server does this for example), you need to
                      comment it out in the file /etc/mysql/my.cnf or /etc/my.cnf. Of course
                      your my.cnf file might also exist in the "data" directory of your MySQL
                      server, or anywhere else (depending on how MySQL was compiled for your
                      system). Binaries created by MySQL AB always look in /etc/my.cnf and
                      [datadir]/my.cnf. If your MySQL server has been firewalled, you will
                      need to have the firewall configured to allow TCP/IP connections from
                      the host where your Java code is running to the MySQL server on the port
                      that MySQL is listening to (by default, 3306).
                    </para>
				</sect3>
			</sect2>
		</sect1>
		<sect1>
			<title>Start inbuilt Tomcat</title>
			<simpara>If you haven't chosen to deploy Scarab, as a WAR file or else, into an external servlet container, then you
			are able to run the compiled Scarab sources by an inbuilt Tomcat distribution.</simpara>
			<simpara>On Windows, double-click on the file <computeroutput>$SCARAB_HOME/tomcat/bin/startup.bat</computeroutput></simpara>
			<simpara>On Unix/Linux, run the following shell script: <computeroutput>$SCARAB_HOME/tomcat/bin/startup.sh</computeroutput></simpara>
			<simpara>The webapplication will be available as reflected by the settings of the following properties:</simpara>
			<itemizedlist>
				<listitem>
					<simpara>scarab.http.scheme</simpara>
				</listitem>
				<listitem>
					<simpara>scarab.http.domain</simpara>
				</listitem>
				<listitem>
					<simpara>scarab.http.port</simpara>
				</listitem>
				<listitem>
					<simpara>scarab.context</simpara>
				</listitem>
			</itemizedlist>
			<simpara>In general your Scarab will be available from a browser on the URL: ${scarab.http.scheme}://${scarab.http.domain}:${scarab.http.port}/${scarab.context}</simpara>
			<simpara>Consequently in case you did NOT change the default properties, you now will find Scarab by pointing your Browser to: http://localhost:8080/scarab</simpara>
			<simpara>
			  If your setup is ok, you will be presented with the Scarab login page after
              one initial redirect. If that happens, congratulations! You now have Scarab 
              installed and running on your system.
            </simpara>
			<simpara>
			  If any of the above steps fail, then please read the full README.txt file.
              If you are still having problems then please subscribe to the Scarab users
              mailing list at: users-subscribe@scarab.tigris.org</simpara>
			<simpara>Once you are subscribed, send a message to users@scarab.tigris.org detailing your problem.</simpara>
		</sect1>
	<sect1>
	  <title>Building Scarab with the web install application</title>
	  <simpara>For a quick install, a test install or if you just want to experiment with Scarab, you will find the web installation simpler and much more user-friendly. This simplified process allows you to define the most current parameters and gives you short explanations and even some advice.</simpara>
	  <simpara>If you are a power user and want a fine-tuned installation or if your environment does not allow for the web installer, skip this section and install Scarab from the command line.</simpara>
		<sect2>
			<title>Step 1: Unpack the Scarab distribution</title>
			<para>
			   The Scarab release can be downloaded as either a .zip or a .tar.gz file.
               Unpack either one of these into a directory that you have write access
               to.
          </para>
		</sect2>
		<sect2>
		  <title>Step 2 : Unpack the web installer</title>
		  <para>
		    Download the install application from the Scarab web site and unpack the web application at the same place you unpacked the Scarab distribution. You may be asked whether you accept to overwrite $SCARAB/tomcat/conf/web.xml : accept it.
		  </para>
		</sect2>
		<sect2>
		  <title>Step 3: Configure and start Tomcat</title>
		  <simpara>With the default settings, Tomcat will start listening on the 8080 port. If this is a problem (e.g., because another program -- such as the Oracle XE admin application -- uses this port), edit the <computeroutput>$SCARAB/tomcat/conf/server.xml</computeroutput> file and change the port (line 3).</simpara>
		  <simpara>To start Tomcat, go to the <computeroutput>$SCARAB/tomcat/bin</computeroutput> directory and launch:</simpara>
		  <itemizedlist>
		  <listitem><simpara><computeroutput>startup.sh</computeroutput> (Unix)</simpara></listitem>
		  <listitem><simpara><computeroutput>startup.bat</computeroutput> (Windows)</simpara></listitem>
		  </itemizedlist>
		</sect2>
		<sect2>
		<title>Step 4: Configure Scarab</title>
		<simpara>Now launch your favorite web browser and go to the following URL: <ulink url="http://localhost:8080/ScarabWebInstaller">http://localhost:8080/ScarabWebInstaller</ulink></simpara>
		<simpara>You'll see the &quot;Basic settings&quot; page..</simpara>
		<graphic fileref="images/webinstall1.png"/>
		<simpara>This web page has four forms. If you want to modify the default values for a parameter in a form, do not forget to save this setting using the &quot;Submit&quot; button (the settings are saved one block at a time and not page by page).</simpara>
		<graphic fileref="images/webinstall2.png"/>
		<simpara>You may navigate back and forth between the &quot;Basic settings&quot; and &quot;Advanced settings&quot; tabs. When you are finished configuring the application as you wish, scroll down to the bottom of a page and click <emphasis>Build Scarab now !</emphasis></simpara>
		<graphic fileref="images/webinstall3.png"/>
		<simpara>The application writes down your parameters in the <computeroutput>build.properties</computeroutput> file, located in the root directory of your installation, generates a shell script to invoke Ant and executes this script.</simpara>
		<simpara>The result appears on the next page:</simpara>
		<graphic fileref="images/webinstall4r.png"/>
		<simpara>If this worked as expected, you can proceed and create the Scarab database using the &quot;Build the Scarab database&quot; button.</simpara>
		<graphic fileref="images/webinstall5.png"/>
		<simpara>The application writes a second shell script to invoke Ant and launches this script. The result appears on the last page.</simpara>
		<graphic fileref="images/webinstall6r.png"/>
		<simpara>If this last operation was a success, the installation is almost over, you have just some cleanup to perform. In fact, Scarab may have been launched already by Tomcat but you really should stop, purge and restart Tomcat.</simpara>
		</sect2>
		<sect2>
		<title>Step 5: Stop Tomcat</title>
		  <para>To stop Tomcat, go to the <computeroutput>$SCARAB/tomcat/bin</computeroutput> directory and execute:</para>
		  <itemizedlist>
		  <listitem><simpara><computeroutput>shutdown.sh</computeroutput> (Unix)</simpara></listitem>
		  <listitem><simpara><computeroutput>shutdown.bat</computeroutput> (Windows)</simpara></listitem>
		  </itemizedlist>
		</sect2>
		<sect2>
		<title>Step 6: Remove the web installer</title>
		<simpara>The web installer is unprotected and leaving it there would certainly create a security issue. If you want to leave your Scarab installation in a clean state, uninstall the web installer by removing the <computeroutput>ScarabWebInstaller</computeroutput> directory under <computeroutput>$SCARAB/tomcat/webapps</computeroutput>.</simpara>
		<simpara>(If you are a paranoid admin, you have probably kept the $SCARAB/tomcat/conf/web.xml file around. Otherwise you still may retrieve an original version from the Scarab distribution. But this is not stricty required.)</simpara>
		</sect2>
		<sect2>
		<title>Step 7: Restart Tomcat and launch Scarab</title>
		<simpara>You may now restart Tomcat as has been explained in the Step 3 above.</simpara>
		</sect2>
	</sect1>
</chapter>
