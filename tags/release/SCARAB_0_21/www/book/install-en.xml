<!-- $Id$ -->
<chapter>
	<title>Scarab Installation</title>
	<sect1>
		<title>General</title>
		<sect2>
			<title>How to install Scarab</title>
			<para>In the current state of development -- and maybe in the long term as well -- Scarab does not install fully assembled, as is usually the case with an installation program.</para>
			<para>Scarab is built dynamically for every particular installation, according to local parameters among which the database used to store the issues and other information that Scarab needs to work.</para>
			<para>This could make you anxious at first sight, but the process is simple and proven: you can achieve this task easily like most other people did until now.</para>
		</sect2>
		<sect2>
			<title>The steps in a normal Scarab installation</title>
			<para>A normal installation is performed in four steps :
				<itemizedlist>
					<listitem>
						<para>Preparing the installation</para>
					</listitem>
					<listitem>
						<para>Installing and configuring the database management software</para>
					</listitem>
					<listitem>
						<para>Building Scarab</para>
					</listitem>
					<listitem>
						<para>Building the Scarab database</para>
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>
	<sect1>
		<title>Preparing the installation</title>
		<sect2>
			<title>Choosing an operating system</title>
			<para>Scarab is theoretically portable on any system that supports Java.</para>
			<para>Practically, Scarab has been used and intensively tested on three kinds of platforms:</para>
			<itemizedlist>
				<listitem>
					<para>Linux: the platform on which the most experience has been gathered (and thus the system on which you will easily get support from the user community if ever you face a problem).</para>
				</listitem>
				<listitem>
					<para>Windows</para>
				</listitem>
				<listitem>
					<para>MacOS X: in fact, Scarab has been developed in part on this platform, and the first Scarab demonstrator, the "runbox", was running on this platform.</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2>
			<title>Choosing a database manager</title>
			<para>Scarab needs a database management system to store the issues and other structured information (parameters, queries, reports, modules,...). Thus, you have to choose an RDBMS (for the database installation, see the next chapter).</para>
			<para>Theoretically, you could use Scarab on any RDBMS that has a JDBC driver.</para>
			<para>Practically, you are faced with some SQL compatibility issues, and moreover, you need to have correct support for this DBMS in Torque, the persistence and object-relational mapping component associated with the Turbine framework, on which Scarab is built.</para>
			<sect3>
				<title>DBMS that have been tested with Scarab (and are supported)</title>
				<sect4>
					<title>MySQL</title>
					<para>MySQL is the DBMS on which Scarab has been developed and fully tested. If you don't have any particular reason to choose a database or another to run Scarab, MySQL should be your first choice.</para>
					<para>Which version to choose? Scarab will work with any 3.x or 4.x version of MySQL. It could happen in the future that the support of version 3 could be dropped to use the transactional functionalities that are available only in version 4. So, if you don't have a particular reason to choose a particular version, you may choose long term peace of mind and use a version 4.x. from the start.</para>
					<para>MySQL is open-source software, and it is available for free on Linux, Windows and a few other platforms (commercial licences and support are available for a fee).</para>
				</sect4>
				<sect4>
					<title>PostgreSQL</title>
					<para>Scarab has been tested successfully on PostgreSQL, version 7.2.1 and the following.</para>
					<para>PostgreSQL is open-source software, and it is available for free on Linux and Windows.</para>
				</sect4>
				<sect4>
					<title>Oracle 9i</title>
					<para>The compatibility of Scarab with Oracle 9i has also been tested</para>
					<para>Because of a problem with the manner Torque manages BLOBs, using Scarab with Oracle 9i is a bit more difficult than with other DBMS (you will have to patch the code generated by Torque).</para>
				</sect4>
			</sect3>
			<sect3>
				<title>DBMS that have been tested and are not (fully) supported by Scarab</title>
				<simpara>The following DBMS have their setup ready in Scarab and have been tested, but the tests have shown so far that Scarab is not fully operational on these platforms:</simpara>
				<itemizedlist>
				  <listitem>
				    <simpara>Microsoft SQL Server<footnote><simpara>Problems remain with the use of the SQL CONCAT function and in the mapping of certain types by Torque.</simpara></footnote></simpara>
				  </listitem>
				  <listitem><simpara>HSQLDB</simpara></listitem>
				  <listitem><simpara>DB2</simpara></listitem>
				</itemizedlist>
				<simpara>Moreover:</simpara>
				<itemizedlist>
				  <listitem><simpara>Apache Derby has been quickly tested recently; though it does not work at the moment, further testing is planned.</simpara></listitem>
				  <listitem><simpara>Oracle 8i has been supported in the early versions of Scarab but is no longer supported (and will not be supported again)<footnote><simpara>Unless someone volunteers but it is a tough problem with <emphasis>right outer joins</emphasis>.</simpara></footnote>.</simpara></listitem>
				</itemizedlist>
			</sect3>
		</sect2>
		<sect2>
			<title>Choosing a servlet container</title>
			<para>Scarab runs on any Servlet 2.3-compatible servlet engine; in fact, a patch could make Scarab compatible with 2.2 servlet engines, among which WebSphere Application Server 4.0 -- but this has not been tested for a very long time.</para>
			<para>Practically, most Scarab users use it on Tomcat; in fact, the Scarab installation process builds a "light" Tomcat server, the &quot;sandbox&quot;, which you can use to test or run Scarab once it has been built.</para>
			<para>You may want to deploy Scarab on an existing Tomcat installation; Resin has also been successfully tested as Scarab engine.</para>
			<para>Deploying Scarab on &quot;full&quot; J2EE application servers has usually been tricky and has rarely worked. Recent tests have shown at least that it does not work &quot;out of the box&quot; neither on JBoss<footnote><simpara>Most probably there is at least a problem with the log4j settings.</simpara></footnote> nor on WebLogic Server.</para>
		</sect2>
		<sect2>
			<title>Gathering the other elements required for the Scarab installation</title>
			<para>To perform the Scarab installation, you will need three more things: a Java SDK, Ant and -- of course -- Scarab itself.</para>
			<sect3>
				<title>Download and install a Java SDK</title>
				<para>If you don't have a Java SDK handy (pre-installed on some systems such as MacOS X or certain Linux distributions), you need to download and install one. Be careful: you need a Java 2 SDK and not only a JRE (Java Runtime Environment) because you will need to compile Scarab.</para>
				<para>The SDK version must be at least 1.3.1.</para>
				<para>You may download a Java SDK from <ulink url="http://java.sun.com">http://java.sun.com</ulink>.</para>
				<para>Make sure the JAVA_HOME environment variable correctly points to the directory in which your SDK is installed.</para>
			</sect3>
			<sect3>
				<title>Download and install Ant</title>
				<para>To build Scarab, you will need the Ant build system.</para>
				<para>You can download Ant from <ulink url="http://ant.apache.org">http://ant.apache.org</ulink>.</para>
				<para>The Ant version should be 1.5.1 or greater.</para>
				<para>Make sure the ANT_HOME environment variable correctly points to the directory in which Ant is installed</para>
				<caution>
				  <simpara>The version of ant that is supplied by RedHat with RHEL3 (latest update is ant-1.5.2-23) throws an exception when running the create-db target.</simpara>
				  <simpara>The exception is:</simpara>
				  <simpara>
				    <computeroutput>BUILD FAILED file:/export/home/admin/scarab/target/scarab/WEB-INF/conf/runtime-torque.xml:72: taskdef class org.apache.torque.task.TorqueDocumentationTask cannot be found</computeroutput>
				  </simpara>
				  <simpara>Work Around: use the version of ant that comes bundled with SCARAB:</simpara>
				  <itemizedlist>
				    <listitem><simpara>Copy it from <computeroutput>$SCARAB_ROOT/www/repository/ant/jars/ant-1.5.3-1.jar</computeroutput> to <computeroutput>$SCARAB_ROOT}/build</computeroutput></simpara></listitem>
				    <listitem><simpara>From $SCARAB_ROOT/build run <computeroutput>java â€“jar ant-1.5.3-1.jar create-db</computeroutput></simpara></listitem>
				  </itemizedlist>
				</caution>
			</sect3>
			<sect3>
				<title>Download Scarab</title>
				<para>You need of course to download Scarab itself. You will find the latest version (1.0-b21) at the following URL: <ulink url="http://scarab.tigris.org/servlets/ProjectDocumentList">http://scarab.tigris.org/servlets/ProjectDocumentList</ulink>.</para>
			</sect3>
		</sect2>
		<sect2>
		  <title>Understanding and setting up NTLM authentication</title>
		  <abstract>
		    <simpara>NTLM authentication provides automatic login (Single Sign-On) in Windows NT domains. It is only useful in carefully controlled and administered environments, it requires some additional setup, so if you don't plan to use this feature, you may (you should) skip this section.</simpara>
		  </abstract>
		  <sect3>
		    <title>Understanding NTLM authentication in Scarab</title>
		    <simpara>
		      This development is intended to provide the means for automatic login on
              Windows networks. Initially based on code provided by Peter Nei (thanks!),
              current implementation is mostly based on JCIFS (see note at the end of this doc).
            </simpara>
            <simpara>
              It's implemented as a new valve in the pipeline (NtlmLoginValve), that
              will try to get the credentials from the browser using the ntlm challenge
              protocol.
            </simpara>
            <simpara>The credentials sent by the browser are not trusted directly, and they're authenticated in a NTLM domain.</simpara>
            <simpara>
              Given that feature is not automatically cross-browser (it needs some config tweaks in Firefox, and it's not
              guaranteed to work on every browser), it might only makes sense in controlled network environments.
            </simpara>
            <sect4>
              <title>Behaviour</title>
              <simpara>The NTLM login will be inactive by default, and it will be activated using two Scarab properties:</simpara>
              <simpara><computeroutput>scarab.login.ntlm.active=true|false</computeroutput></simpara>
              <simpara>The setting of this property to <computeroutput>true</computeroutput> will require the authentication domain to be defined.</simpara>
              <simpara><computeroutput>scarab.login.ntlm.domain=mydomaincontroller</computeroutput></simpara>
              <simpara>
                When browsing, the NTLMLoginValve will try to get the credentials and
                validate them against the NTLM domain.
                If they are valid. it will try logging in the user into Scarab.
                <emphasis role="bold">For this to succeed, the NTLM usename must match an Scarab username.</emphasis>
                If the user gets logged in, a message will be displayed, such as</simpara>
                <informalexample>
                  <programlisting>
                     You've been automatically logged in using your user 'YourUser' from domain 'YourDomain'."
                  </programlisting>
                </informalexample>
                <simpara>
                  If anyone from the NTLM credentials or its equivalent Scarab username are invalid, the valve will
                  just 'pass' and the rest of the login system will proceed (Login form / Anonymous).
                </simpara>
                <simpara>
                  When an authenticated user (even Anonymous) click on the 'Logout/Login' link, the session will be
                  terminated and the Login.vm screen will be displayed, so any user (NTLM or
                  not) can try logging in the system with other credentials.
                </simpara>
            </sect4>
            <sect4>
              <title>Single-Sign-On behaviour</title>
              <simpara>
                User are still able to login using the old form, and this causes a 
                problem because Scarab and NTLM passwords will not be synchronized.
              </simpara>
              <simpara>Possible solutions:</simpara>
              <orderedlist>
                <listitem>
                  <simpara>Disable form-login: This would be a problem if some users are not to be in the Windows domain.</simpara>
                </listitem>
                <listitem>
                  <simpara>
                    Use a UserPreference to choose between NTLM and form login for every user. This would effectively restrict
                    any user to only one authentication method, be Scarab or NTLM, but it would add another administration task.
                    password in Scarab, the NTLM PASSWORD WILL NOT CHANGE, and neither .
                    Similarly, the Windows domain can revoke or
                  </simpara>
                </listitem>
              </orderedlist>
            </sect4>
            <sect4>
              <title>Login precedences</title>
              <simpara>The different login methods allowed will be selected in this order:</simpara>
              <orderedlist>
                <listitem><simpara>Login form will always take precedence on others.</simpara></listitem>
                <listitem><simpara>If the login-form has not been used, the system will try NTLM authentication (if activated!)</simpara></listitem>
                <listitem><simpara>Anonymous login will be granted if allowed.</simpara></listitem>
              </orderedlist>
            </sect4>
            <sect4>
              <title>Firefox</title>
              <simpara>
                Firefox users will be by default prompted with a dialog box asking for
                username and password. To login with Windows domain credentials, the user will have to fill them up using the DOMAIN\User format.
              </simpara>
              <simpara>Example: Username: "MyDomain\mywindowsuser", Password: myplainpassword</simpara>
              <simpara>
                If Firefox users want to automatically (no dialog!) get the credentials fed from the underlaying Windows
                operating system, they have to:</simpara>
                <itemizedlist>
                  <listitem><simpara>Type "about:config" in the URL box.</simpara></listitem>
                  <listitem><simpara>Search for the 'network.automatic-ntlm-auth.trusted-uris' configuration value.</simpara></listitem>
                  <listitem><simpara>Add the name of the Scarab host to that value.</simpara></listitem>
                </itemizedlist>
            </sect4>
            <sect4>
              <title>Other browsers</title>
              <simpara>The feature has not been tested on other browsers. At least, they would probably offer the dialog asking for username and password, but it may vary.</simpara>
            </sect4>
		  </sect3>
		  <sect3>
		    <title>Preparing Scarab for NTLM authentication</title>
		    <abstract><simpara>You have to perform some library setup before building Scarab; that is why this lengthy thread about NTLM authentication took place here.</simpara></abstract>
		    <sect4>
		      <title>jcifs</title>
		      <simpara>To perform NTLM authentication, Scarab relies on the jcifs library, part of the Samba project (<ulink url="http://jcifs.samba.org">http://jcifs.samba.org</ulink>).</simpara>
		      <simpara>The license of jcifs is LGPL, so  the jar cannot be included in the Scarab distribution.</simpara>
		      <simpara>
		        Some Apache projects (Lenya) have been using jcifs, providing a <emphasis role="bold">mock jar</emphasis> to allow compiling and asking the administrator to manually download the (real) jar.
		        This method fits Scarab too, so you will have to download jcifs yourself from one of these URls:</simpara>
		        <itemizedlist>
		          <listitem><simpara><ulink url="http://jcifs.samba.org/">http://jcifs.samba.org/</ulink></simpara></listitem>
		          <listitem><simpara><ulink url="http://www.ibiblio.org/maven/org.samba.jcifs/jars/jcifs-1.2.6.jar">http://www.ibiblio.org/maven/org.samba.jcifs/jars/jcifs-1.2.6.jar</ulink></simpara></listitem>
		        </itemizedlist>
		        <simpara>
		          Once you have got the jar file, you must replace the jar that was delivered with Scarab.
		          Be aware that if you are using Maven, you have possibly already got the mock version in your local Maven repository (usually at $HOME/.maven/repository/org.samba.jcifs/jars).
		        </simpara>
		        <warning><simpara>You must replace the (mock) jar with the real jar you have downloaded.</simpara></warning>
		    </sect4>
		  </sect3>
		</sect2>
	</sect1>
	<sect1>
	  <title>Setting up and configuring your database for Scarab</title>
	  <sect2>
		<title>Installing and configuring MySQL</title>
		<sect3>
			<title>Guide for Linux with RPM packages</title>
			<sect4>
				<title>Grab the MySQL distribution</title>
				<simpara>You will find an appropriate distribution through the <ulink url="http://www.mysql.com">MySQL website</ulink>.</simpara>
				<simpara>You can follow the instructions from the MySQL documentation. We shall give here summary info only.</simpara>
			</sect4>
			<sect4>
				<title>Install the distribution</title>
				<simpara>For example if you have grabbed version 4.0.22, you can install MySQL as follows:</simpara>
				<informalexample>
					<programlisting>
            rpm -i MySQL-server-4.0.22-0.i386.rpm  MySQL-shared-4.0.22-0.i386.rpm  MySQL-client-4.0.22-0.i386.rpm
            </programlisting>
				</informalexample>
			</sect4>
			<sect4>
				<title>Initialize and setup your database server</title>
				<simpara>Install the root database first and start the mysql-daemon. This step is apparently not required, because installing the rpm's already processes these steps. But just in case they don't, you can do manually:</simpara>
				<informalexample>
					<programlisting>
mysql_install_db
safe_mysqld
            </programlisting>
				</informalexample>
			</sect4>
		</sect3>
		<sect3>
			<title>Configuring MySQL for Scarab</title>
			<simpara>The following cookbook approach summarizes the process of tracking down connection problems with MySQL __and__ Scarab which almost ever turn out to be a matter of incorrectly configured privileges. I assume you have a clean MySQL installation on your system and you want to run the MySQL database and scarab on the same host namely <computeroutput>localhost</computeroutput>. Each step below goes into some degree of detail. Maybe not all described steps are necessary in your environment.</simpara>
			<sect4>
				<title>Step I (unix only) - Check the /etc/hosts file</title>
				<simpara>If you plan to run MySQL on localhost, you must check the corresponding entry in your /etc/hosts file. We have seen problems when the localhost entry is defined as in the following example:</simpara>
				<informalexample>
					<programlisting>
127.0.0.1    localhost.localdomain localhost   (seen on debian)
127.0.0.1    linux localhost                   (seen on Suse)
            </programlisting>
				</informalexample>
				<simpara>If you see similar entries, revert the order so that "localhost" appears first:</simpara>
				<informalexample>
					<programlisting>
127.0.0.1    localhost localhost.localdomain    (seen on debian)
127.0.0.1    localhost linux                    (seen on Suse)
            </programlisting>
				</informalexample>
				<simpara>You may need to reboot(!) although I am not sure about this. After reboot, ensure that your operating system has not manipulated the entry in your /etc/hosts file. I have no idea what to do if this happens... (FIXME: add a recipe for this situation)
</simpara>
			</sect4>
			<sect4>
				<title>Step II - Ensure MySQL is up and running</title>
				<simpara>I assume you have just installed an instance of MySQL. MySQL comes with an administration user named "root" and with no password at all. Yes, this is highly insecure. However it helps getting started with MySQL quickly. We will come back to security in the next step.</simpara>
				<simpara>For now just try to enter the database administration. You may do so from a commandline (dos box or windows shell):</simpara>
				<simpara>
					<computeroutput>mysql -u root mysql</computeroutput>
				</simpara>
				<simpara>Now you should have access to the administration database of your MySQL instance. If you are rejected, something out of the trail happened. Either your database is corrupted or someone else has installed the database and has set up security. In that case you may need to ask your administrator to give you access to the "mysql" database in order to proceed with the next step.</simpara>
			</sect4>
			<sect4>
				<title>Step III - Secure your MySQL instance (optional)</title>
				<simpara>Once you are logged in to the database either as root, or as some administrator (depending on your site) you can check the  grants:</simpara>
				<informalexample>
					<programlisting>
select host, user, password from user;

       +-----------+------+----------+
       | host      | user | password | 
       +-----------+------+----------+
       | localhost | root |          |
       +-----------+------+----------+
       1 row in set (0.01 sec)
            </programlisting>
				</informalexample>
				<simpara>Now let's secure it. First, we want to secure the root user. Thus we give him/her a password, we choose "secret" here.</simpara>
				<note>
					<simpara>This step is NOT necessary to get Scarab up and running, so if you don't want to secure your database now, just don't execute the following statement.</simpara>
				</note>
				<informalexample>
					<programlisting>
grant all on *.* to root@localhost identified by 'secret';
            </programlisting>
				</informalexample>
				<simpara>From now on you MUST remember your password for ever! The user table now looks as follows:</simpara>
				<informalexample>
					<programlisting>
select host, user, password from user;
+-----------+------+-------------------------------------------+
| host      | user | password                                  |
+-----------+------+-------------------------------------------+
| localhost | root | *14E65567ABDB5135D0CFD9A70B3032C179A49EE7 |
+-----------+------+-------------------------------------------+
1 row in set (0.00 sec)
                  </programlisting>
				</informalexample>
			</sect4>
			<sect4>
				<title>Step IV - Add the admin user for Scarab</title>
				<simpara>We choose <emphasis>admin</emphasis> as administrator using the password <emphasis>secret</emphasis> and furthermore we choose the database name to be <emphasis>scarab</emphasis>. Of course you can take your own choice. </simpara>
				<note>
					<simpara>You will need ALL choices above later to add them to the {{build.properties}} of Scarab !</simpara>
				</note>
				<informalexample>
					<programlisting>
     grant all on scarab.* to admin@localhost identified by 'secret';
     grant grant option on scarab.* to admin@localhost;
     grant all on mysql.* to admin@localhost;
            </programlisting>
				</informalexample>
				<note>
					<simpara>You need the second statement because the admin user will eventually create the runtime database user! (see below) The term <computeroutput>grant grant option</computeroutput> above is definitely correct! You also will need the third statement because your scarab user uses a password for identification. In order to be able to make the  appropriate settings, the admin needs access to the mysql control tables.</simpara>
				</note>
				<simpara>This is how the user table looks like now:</simpara>
				<informalexample>
					<programlisting>
select host, user, password from user;
+-----------+--------+-------------------------------------------+
| host      | user   | password                                  |
+-----------+--------+-------------------------------------------+
| localhost | root   | *14E65567ABDB5135D0CFD9A70B3032C179A49EE7 |
| localhost | admin  | *14E65567ABDB5135D0CFD9A70B3032C179A49EE7 |
+-----------+--------+-------------------------------------------+
                  </programlisting>
				</informalexample>
			</sect4>
			<sect4>
				<title>Step V - Test the settings</title>
				<caution>
					<simpara>For safety keep the current shell open  and DO NOT QUIT the mysql session. That helps if something went wrong ;-)</simpara>
				</caution>
				<simpara>OK, now open a new shell and try to create a database from the admin user:</simpara>
				<informalexample>
					<programlisting>
mysqladmin -u admin -h localhost -p create scarab
Enter password: ******
            </programlisting>
				</informalexample>
				<simpara>Now you have created your scarab database, though it's empty. If the database was already there you would have received an appropriate error message! In that case don't proceed until you have checked where this database came from!</simpara>
				<note>
					<simpara>This step is NOT required for the Scarab setup, but doing so ensures that your privilege settings for the Scarab administration user are correct and work as needed. </simpara>
				</note>
			</sect4>
			<sect4>
				<title>Step VI - Configure scarab
        </title>
				<simpara>Make a copy of minimal.properties (or project.properties) and name it build.properties. You will need to define a runtime database user for your instance now. Let's choose "scarab" as username and "baracs" as password. These two properties will be needed now in addition to the admin user created in step IV above  (just keep them in mind for a minute)</simpara>
				<simpara>Now edit build.properties. About the database settings, please get hands on these properties:</simpara>
				<informalexample>
					<programlisting>
scarab.database.username=scarab       #changed from **GENERATED**
scarab.database.password=baracs       #changed from **GENERATED**    
scarab.database.admin.username=admin  #changed from **GENERATED**
scarab.database.admin.password=secret #changed from **GENERATED**    
scarab.database.host=localhost        #unchanged
scarab.database.name=scarab           #unchanged
          </programlisting>
				</informalexample>
				<simpara>Just to be complete: there are other relevant properties, but usually they are generated from the above settings. The only two additional properties you should take care of are:</simpara>
				<informalexample>
					<programlisting>
scarab.database.type=mysql            #unchanged
scarab.database.port=**GENERATED**    #unchanged
          </programlisting>
				</informalexample>
				<simpara>Where the first one is set to mysql by default and the last one is set to the standard port 3306 used by MySQL for the connection peer.</simpara>
				<note>
					<simpara>The database.username and password are later used to  automatically create(!) an additional user 'scarab' with password 'baracs'. So don't bother yourself with setting up other users except the admin user !</simpara>
				</note>
			</sect4>
			<sect4>
				<title>Step VII - Build scarab</title>
				<simpara>Go to the build directory and launch ant</simpara>
				<informalexample>
					<programlisting>
    ant
    ant create-db
            </programlisting>
				</informalexample>
				<simpara>This should execute without any error now. You should see something like this in the shell:</simpara>
				<informalexample>
					<programlisting>
     [echo]
     [echo]   _________R U N T I M E  B U I L D ___.
     [echo]  /   _____/ ____ _____ ____________ \_ |__
     [echo]  \_____  \_/ ___\\__  \\_  __ \__  \ | __ \
     [echo]  /        \  \___ / __ \|  | \// __ \| \_\ \
     [echo] /_______  /\___  >____  /__|  (____  /___  /
     [echo]         \/     \/     \/           \/    \/
     [echo]
     [echo]         [1.0-b20-200605092134]
     [echo]
     [echo]
     [echo]         Running with following options:
     [echo]
     [echo]         database name = scarab
     [echo]         database type = mysql
     [echo]         jdbc driver   = org.gjt.mm.mysql.Driver
     [echo]         database url  = jdbc:mysql://localhost:3306/scarab?
     [echo]         host          = localhost
     [echo]         port          = 3306
     [echo]         username      = scarab
     [echo]         admin user    = Administrator
     [echo]
             </programlisting>
				</informalexample>
			</sect4>
			<sect4>
				<title>Rebuild Scarab after failure</title>
				<simpara>The whole property settings have been copied from the build environment, thus the configuration may be invalid. In order to fix this you must regenerate the configuration (not the class files!). You can use ant for this:</simpara>
				<informalexample>
					<programlisting>
cd build
ant create-custom-property-file
            </programlisting>
				</informalexample>
				<simpara>But definitely the safest way to proceed is simply rebuilding everything:</simpara>
				<informalexample>
					<programlisting>
ant clean
ant
ant create-db
            </programlisting>
				</informalexample>
			</sect4>
			<sect4>
				<title>Troubleshooting</title>
				<sect5>
					<title>If nothing helps</title>
					<simpara>Here are a couple of additional links to help you solve the permissions problem:</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<ulink url="http://www.mysql.com/documentation/mysql/bychapter/manual_MySQL_Database_Administration.html#Access_denied">MySQL documentation</ulink>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<ulink url="http://sourceforge.net/docman/display_doc.php?docid=8968&amp;group_id=15923">sourceforge</ulink>
							</simpara>
						</listitem>
					</itemizedlist>
				</sect5>
				<sect5>
					<title>Last resort (applies to some linux distros)</title>
					<para>
                      If nothing helps, check this (thanks to Josh Howe for investigation).
                      MySQL Connector/J can only communicate with MySQL using TCP/IP, as Java
                      does not support Unix domain sockets. TCP/IP communication with MySQL
                      may be affected if MySQL was started with the "--skip-networking"
                      flag or if it is firewalled.
                    </para>
					<para>
					  If MySQL has been started with the "--skip-networking" option set (the
                      Debian Linux package of MySQL server does this for example), you need to
                      comment it out in the file /etc/mysql/my.cnf or /etc/my.cnf. Of course
                      your my.cnf file might also exist in the "data" directory of your MySQL
                      server, or anywhere else (depending on how MySQL was compiled for your
                      system). Binaries created by MySQL AB always look in /etc/my.cnf and
                      [datadir]/my.cnf. If your MySQL server has been firewalled, you will
                      need to have the firewall configured to allow TCP/IP connections from
                      the host where your Java code is running to the MySQL server on the port
                      that MySQL is listening to (by default, 3306).
                    </para>
				</sect5>
			</sect4>
		</sect3>
		</sect2>
		<sect2>
		  <title>Configuring PostgreSQL</title>
		  <simpara>
            Due to a problem in the database persistence framework we use, Scarab
            will not work &quot;out-of-the-box&quot; with PostgreSQL. Fortunately, there is
            a simple script that you can run which will create a work-around.
          </simpara>
          <simpara>
            This script must be run by a user with sufficient privileges, which
            generally means the user that originally created and initialised the
            PostgreSQL database. Typically this user will be 'postgres'.
          </simpara>
          <simpara>
            The script can be found at <computeroutput>src/sql/postgresql/hack-db.sql</computeroutput> in the
            distribution, and it can be executed in different ways, for example
            from the command line:
          </simpara>
          <informalexample>
            <programlisting>postgres&gt; psql scarab &lt; hack-db.sql</programlisting>
          </informalexample>
          <simpara>
            where 'scarab' is the name of the Scarab database, and 'postgres' is
            the &quot;system&quot; postgreSQL user. Alternatively, from the psql interactive
            console:
          </simpara>
          <informalexample>
            <programlisting>scarab=&gt; \i hack-db.sql</programlisting>
          </informalexample>
		</sect2>
		<sect2>
		  <title>Setting up and configuring Oracle</title>
		  <sect3>
		    <title>Getting the JDBC drivers</title>
		    <simpara>For licence reasons, the jar containing the Oracle JDBC driver is not included in the Scarab distribution.</simpara>
		    <simpara>You will have to get it yourself from your Oracle distribution (or from Oracle Technology Network: <ulink url="http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html">http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html</ulink>). Unless you have a compelling reason to do otherwise, you should take the latest drivers: they are compatible with older releases of Oracle but are much faster than the older drivers.</simpara>
		    <simpara>The jar you need is probably named <computeroutput>classes12.jar</computeroutput> (for JDK 1.2 and 1.3) or <computeroutput>ojdbc14.jar</computeroutput> (for JDK 1.4 and 1.5). Copy this jar to the <computeroutput>$SCARAB/lib</computeroutput> directory (i.e., the lib directory directly at the root of your Scarab distribution. In a fresh installation of Scarab, this directory is probably empty, except for a README file. This is normal, it is populated during the build process.</simpara>
		  </sect3>
		  <sect3>
		    <title>Configuring access to your Oracle database</title>
		    <simpara>In the <computeroutput>build.properties</computeroutput> file you will prepare in Step 3 below, you will need to configure the access to your Oracle database.</simpara>
		    <informalexample>
		      <programlisting>
scarab.database.host=localhost
scarab.database.port=
scarab.database.url=
scarab.database.admin.url=
scarab.database.type=oracle
scarab.database.jdbc.driver=oracle.jdbc.driver.OracleDriver
scarab.database.username=scarab
scarab.database.password=secret
scarab.database.admin.username=scott
scarab.database.admin.password=tiger
		      </programlisting>
		    </informalexample>
		  </sect3>
		  <sect3>
		    <title>Solving a problem with LOBs</title>
		    <simpara>To use Large OBjects (LOBs), such as BLOBs (Binary Large OBjects) and CLOBs (Character Large OBjects) you need to instantiate Oracle classes (not JDBC generic classes) and the current version of the persistance layer we use, Torque, does not allow to do that at the moment. A workaround is to use large VARCHARs instead. To change this, you will need to patch the <computeroutput>webapps/scarab/WEB-INF/sql/turbine.sql</computeroutput> after building Scarab (see next section), replacing <computeroutput>BLOB</computeroutput> by <computeroutput>VARCHAR2(4000)</computeroutput><footnote><simpara>You can as well edit <computeroutput>webapps/scarab/WEB-INF/src/torque/templates/sql/base/oracle/db.props</computeroutput> and change <computeroutput>VARBINARY = BLOB</computeroutput> to <computeroutput>VARBINARY = VARCHAR2(4000)</computeroutput> -- that is a slightly more persistent modification.</simpara></footnote></simpara>
		  </sect3>
		  <sect3>
		    <title>Using Oracle 10g XE on the same machine as Scarab</title>
		    <simpara>A word of caution if you plan to use Scarab on the same machine as Oracle 10g XE. Both Scarab and the Oracle administration web app listen by default on the same port (8080), which will cause a conflict.</simpara>
		    <simpara>To configure Scarab to listen on a different port, change the <computeroutput>scarab.http.port</computeroutput> property to a value you choose and edit the <computeroutput>./tomcat/conf.server.xml</computeroutput> file to configure Tomcat to listen to a different port.</simpara>
		    <simpara>To change the port on which the Oracle administration web app listens, consult the Oracle 10g XE documentation.</simpara>
		  </sect3>
		</sect2>
	</sect1>
	<sect1>
		<title>Building Scarab</title>
		<note>
			<simpara>This section is a formatted copy of the INSTALL file at the root of the Scarab distribution.</simpara>
		</note>
		<sect2>
			<title>Step 1: Unpack the Scarab distribution</title>
			<para>
			   The Scarab release can be downloaded as either a .zip or a .tar.gz file.
               Unpack either one of these into a directory that you have write access
               to.
          </para>
		</sect2>
		<sect2>
			<title>Step 2: Migrating an old (pre b19) version of Scarab</title>
			<para>Please, read the 2.1 section of the MIGRATION file for instructions on the migration of your current settings.</para>
			<para>If you don't have an existing pre-b19 Scarab installation, or you don't want to keep your old settings and data, then you can skip this step.</para>
		</sect2>
		<sect2>
			<title>Step 3: Configure Scarab</title>
			<para>
              If you already have an old build.properties file from a previous version
              of Scarab, please copy this build.properties file to the $SCARAB_ROOT
              directory (NOT the build directory) of your new installation.
            </para>
			<para>If you don't already have an old build.properties file, create one as follows:</para>
			<orderedlist>
				<listitem>
					<simpara>Go to your $SCARAB_HOME directory</simpara>
				</listitem>
				<listitem>
					<simpara>copy (not rename!) one of the following two files to build.properties:</simpara>
					<simpara>project.properties   (full customization property set)</simpara>
					<simpara>minimal.properties   (minimal customization property set)</simpara>
					<simpara>
					  You will choose project.properties as your starting point, if you
                      are a developer who is deeply involved into the Scarab development.
                      In all other cases minimal.properties is your best choice (believe us!). 
                      So most of you will be doing this:
                    </simpara>
					<simpara>
						<computeroutput>cd $SCARAB_HOME</computeroutput>
					</simpara>
					<simpara>
						<computeroutput>cp minimal.properties build.properties</computeroutput>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					  Scroll through your build.properties and be sure to follow the notes.
                      If you really miss a property which is not yet available in your 
                      build.properties just add it to your build.properties!
                    </simpara>
				</listitem>
			</orderedlist>
		</sect2>
		<sect2>
			<title>Step 4: Build Scarab</title>
			<simpara>Go to the <computeroutput>$SCARAB_ROOT/build</computeroutput> directory.</simpara>
			<simpara>Launch ant::</simpara>
			<simpara><computeroutput>ant</computeroutput></simpara>
			<note>
			  <simpara>If you are a developer, particularly a Scarab developer, you may also build Scarab with Maven 1.</simpara>
			  <simpara>This will give you additional features and options, such as running unit tests.</simpara>
			  <simpara>For detailed information, see the chapter 3 in the Developer's Guide.</simpara>
			</note>
		</sect2>
		<sect2>
			<title>Step 5a: Create the database</title>
			<warning>
				<simpara>ONLY IF YOU'RE NOT MIGRATING AN EXISTING INSTANCE OF SCARAB !!</simpara>
				<simpara>Read the 'MIGRATION' file if you need to preserve your data !!</simpara>
			</warning>
			<simpara>Now you can create and populate the Scarab database. </simpara>
			<simpara>Just run one of the commands bellow:</simpara>
			<simpara>If you are using ant:</simpara>
			<simpara>ant create-db</simpara>
			<simpara>or</simpara>
			<simpara>ant -Dskip.seed.data=true create-db</simpara>
			<simpara>
			  The second command avoids the population of your database with the
              Scarab sample data. If you are just testing Scarab out, then we 
              recommend that you use the first option and load the sample data 
              into the database.
            </simpara>
			<simpara>If you are using maven, similar commands exist:</simpara>
			<simpara>maven scarab:create-db</simpara>
			<simpara>maven -Dskip.seed.data=true scarab:create-db</simpara>
			<sect3>
				<title>JIRA templates</title>
				<simpara>
				  By default, a module is created with issue-types that match the
                  structure of JIRA, enabling transfer of issues from JIRA to Scarab.
                  If you don't want this extra module in your issue tracker, then you
                 can pass the option "-Dskip.jira.templates.data=true" to ant or maven,
                 e.g.
                </simpara>
				<simpara>
					<computeroutput>ant -Dskip.jira.templates.data=true create-db</computeroutput>
				</simpara>
				<simpara>or</simpara>
				<simpara>
					<computeroutput>maven -Dskip.jira.templates.data=true scarab:create-db</computeroutput>
				</simpara>
				<note>
					<simpara>This option is independent of 'skip.seed.data', so either or both may be specified.</simpara>
				</note>
			</sect3>
		</sect2>
		<sect2>
			<title>Step 5b: Migrate your current data</title>
			<note>
				<simpara>ONLY IF YOU ARE MIGRATING AN EXISTING INSTANCE OF SCARAB !!</simpara>
			</note>
			<simpara>Go to MIGRATION file for instructions on migrating your existing data.</simpara>
		</sect2>
		<sect2>
			<title>Step 6: Start Tomcat</title>
			<simpara>On Windows, double-click on the file $SCARAB_HOME/tomcat/bin/startup.bat</simpara>
			<simpara>On Unix/Linux, run the following shell script: $SCARAB_HOME/tomcat/bin/startup.sh'</simpara>
			<simpara>The webapplication will be available as reflected by the settings of the following properties (see step 3):</simpara>
			<itemizedlist>
				<listitem>
					<simpara>scarab.http.scheme</simpara>
				</listitem>
				<listitem>
					<simpara>scarab.http.domain</simpara>
				</listitem>
				<listitem>
					<simpara>scarab.http.port</simpara>
				</listitem>
				<listitem>
					<simpara>scarab.context</simpara>
				</listitem>
			</itemizedlist>
			<simpara>In general your Scarab will be available from a browser on the URL: ${scarab.http.scheme}://${scarab.http.domain}:${scarab.htp.port}/${scarab.context}</simpara>
			<simpara>Consequently in case you did NOT change the default properties, you now will find Scarab by pointing your Browser to: http://localhost:8080/scarab</simpara>
			<simpara>
			  If your setup is ok, you will be presented with the Scarab login page after
              one initial redirect. If that happens, congratulations! You now have Scarab 
              installed and running on your system.
            </simpara>
			<simpara>
			  If any of the above steps fail, then please read the full README.txt file.
              If you are still having problems then please subscribe to the Scarab users
              mailing list at: users-subscribe@scarab.tigris.org</simpara>
			<simpara>Once you are subscribed, send a message to users@scarab.tigris.org detailing your problem.</simpara>
		</sect2>
	</sect1>
</chapter>
