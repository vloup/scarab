<!-- $Id$ -->
<chapter>
	<title>Best Practices</title>
	<sect1>
		<title>Prototype!</title>
		<simpara>From the previous chapter, you should have understood that it is not easy (at the moment?) to spread &quot;schema&quot; modifications (changes in issue types, attributes, etc.) towards a large number of modules.</simpara>
		<simpara>If you begin to use Scarab and you plan to create a significant number of modules, it is very important to design the initial schema from which the modules will be created.</simpara>
		<simpara>A bit of advice: do not neglect the initial design phase at the beginning of the &quot;Scarab project&quot;. Which artefacts will be useful for you? Which attributes will you use? What is your workflow (see next chapter)?</simpara>
		<simpara>Make a prototype! Even if you have a &quot;production&quot; installation of Scarab around (or you are creating it), make another database instance and test your design. Do you think what you have imagined will meet your needs and those of your (future) users?</simpara>
	</sect1>
	<sect1>
		<title>Sharing a module with a customer</title>
		<sect2>
			<title>Use case</title>
			<simpara>Your Scarab installation is open to your customers, at least partly (the customer has access to certain modules). You want to allow your customer to enter defects or modification requests but you do not want him/her to see neither all the internal issue processing in your organization nor the technical comments or the procedure. How to achieve this? In Scarab, you cannot show or hide attributes according to the Role, for instance.</simpara>
		</sect2>
		<sect2>
			<title>A possible solution</title>
			<simpara>Use two different modules.</simpara>
			<simpara>The first one has all the attributes the customer may enter and see (you may name this moduler &quot;Customer access&quot;): description, priority, severity, environment, etc.</simpara>
			<simpara>The second one has usually more attributes; it contains most attributes in the first module plus technical attributes related to the internal processing.</simpara>
			<simpara>How do you make this work then?</simpara>
			<simpara>When the customer enters an issue, this issue must be processed by someone in your organization.</simpara>
			<tip>
				<simpara>To make sure someone reads all customer issues (without having to connect periodically to Scarab and execute a query), think of putting or addind his/her email address to the module <emphasis>Archive email</emphasis>, so that he/she receives an email for all issues entered or modified.</simpara>
			</tip>
			<simpara>The customer request is evaluated, maybe edited, discussed... and may sometimes never find its way to further processing: misunderstood features may be explained, evolutions may be rejected by the customer in a commercial deal, etc.</simpara>
			<simpara>If the request must be processed by the organization and creates one or several tasks, the issue is copied to the second module and you may then create a dependency between the original issue and the one corresponding to the internal task. When the task is ended, it is closed in the internal module and may then be closed in the &quot;Customer access&quot; module. The customer is automatically informed that the processing of his/her request is ended.</simpara>
		</sect2>
	</sect1>
</chapter>
