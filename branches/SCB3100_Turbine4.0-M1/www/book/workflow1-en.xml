<!-- $Id$ -->
<chapter>
	<title>Workflow</title>
	<sect1>
		<title>Introduction</title>
		<simpara>Workflow has been a widely debated concept for the life of Scarab. In the lighter part of what's been called &quot;workflow&quot; there is the enforcement of certain conditions on the issues, based on the value of its attributes, its so called &quot;state&quot;, or other conditions. In a deeper understanding of the term, workflow deals with the integration between the Scarab actions and other systems/processes.</simpara>
		<simpara>Scarab supports <emphasis>pluggable workflows</emphasis>. Until the milestone 19, the default workflow was not to have one. In fact there was a default workflow that did nothing and allowed all transitions. From milestone 20 upwards, the default option is to use a simple workflow called 'BasicWorkflow'; the behaviour of this workflow is explained below.</simpara>
		<note>
			<title>Changing workflow</title>
			<simpara>If you want to change workflow to use another one or design your own, read the <emphasis>Workflow</emphasis> chapter in the <emphasis>Scarab Developer's Guide</emphasis>.</simpara>
		</note>
	</sect1>
	<sect1>
		<title>BasicWorkflow</title>
		<simpara>The functionalities now provided apply to the first, lighter meaning of the term Workflow.</simpara>
		<sect2>
			<title>State-transition management</title>
			<simpara>The concept of &quot;state&quot; of an issue in Scarab is usually binded to one (or more) attributes. Any attribute of &quot;dropdown list&quot; type may be considered to hold an &quot;state&quot; for the issue it belongs to. In some way this is equally true for the rest of attribute types, but dropdown lists are better suited for this, because they have a closed set of values defined.</simpara>
			<simpara>Though this has always been possible in Scarab, the lack of transition-restriction between the different states made it too easy to get confused, because Scarab did nothing to enforce the workflow processes defined.</simpara>
			<simpara>With the basic workflow functionalities, you can define a workflow of state-transitions on a dropdown list attribute, allowing you to set from which value can you change to any other, and which Rol should the user have to perform the change.</simpara>
			<simpara>This way, any given user will get the options of the status holder attribute limited to the values to which he can make the transition, based on the current value of the attribute, and on his Roles.</simpara>
			<sect3>
				<title>Definition of transitions</title>
				<simpara>The transitions should be defined globally, so you will have to get a user with administration permissions, and go the the &quot;Administration - Global Data - Global Attributes&quot; screen.</simpara>
				<simpara>Now, choose the attribute on which you want to define transitions, or create a new one. Remember: it must be of &quot;dropdown list&quot; type.</simpara>
				<simpara>In the bottom of the screen, you will notice a section called &quot;Transitions&quot;, with a first line with the &quot;New&quot; label. As long as there are no other lines, there are no transitions defined for this attribute, and it will behave just like any other dropdown list attribute.</simpara>
				<simpara>If you want to define any transition, you will choose the &quot;from&quot; value, the &quot;to&quot;, and the required role to make this transition, and click on the &quot;Save&quot; button. If you want to delete a transition, check its selected checkbox, and click on &quot;Delete&quot;</simpara>
				<simpara>Note that as soon as you define any transition on the attribute, the 'default' free-transition behaviour will be disabled. If you want other transitions allowed for any role, you will have to explicitly define them.</simpara>
				<simpara>If you need a initial state, you will have to define a transition from &quot;Empty Option&quot; to its value. If you need an always available state, you will have to define a transition from &quot;Any Option&quot; to its value.</simpara>
			</sect3>
		</sect2>
		<sect2>
			<title>Conditions</title>
			<simpara>Conditions are intended to allow the administrator of Scarab to make some behaviours conditional. As of b20, conditions are defined selecting one or more values from the dropdown-list attributes. The condition will eval to true for a given issue if _any_ of the selected values is set in this issue.</simpara>
			<simpara>You can apply conditions on two behaviours:</simpara>
			<itemizedlist>
				<listitem>
					<simpara>Requireness of an attribute (globally or module-scoped)</simpara>
				</listitem>
				<listitem>
					<simpara>State-transitions</simpara>
				</listitem>
			</itemizedlist>
			<simpara>In the first case, the admin can force any attribute being required whenever the condition evals to true. In the second, a conditioned transition will only be enabled if the condition evals to true.</simpara>
			<simpara>In both cases, you will notice a button with the text &quot;Edit Conditions&quot;. Once clicked, you will get a screen in which you can select the values from every dropdown-list attribute that will form the condition. Clicking &quot;Done&quot; you will be back on the previous screen, and will be able to read the defined condition.</simpara>
		</sect2>
	</sect1>
</chapter>
