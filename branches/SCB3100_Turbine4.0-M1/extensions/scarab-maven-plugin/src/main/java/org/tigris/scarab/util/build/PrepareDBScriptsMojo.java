package org.tigris.scarab.util.build;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;

/**
 *  
 * This prepares the database script.
 *
 * @author jhoechstaedter
 * @execute lifecycle="sql-init" phase="process-resources"
 * @goal prepare-sql-scripts
 */
public class PrepareDBScriptsMojo extends AbstractMojo{

	/**
	 * Input directory for Scarab's content SQL files.
	 * @parameter expression="${project.build.directory}/sql-resources/source"
	 * @readonly
	 */
	protected String sqlSrcDir;
	
	/**
	 * Input directory for Scarab's content SQL files.
	 * @parameter expression="${project.build.directory}/sql-resources"
	 * @readonly
	 */
	protected String sqlResourcesDir;
	
	/**
	 * Input directory for schema SQL files. 
	 * @parameter expression="${project.build.directory}/sql-resources/schema"
	 * @readonly
	 */
	protected String sqlSchemaDir;
	
	/**
	 * Mode for db, e.g. "sample", "default" or "basic"
	 * @parameter default-value="basic" expression="${scarab.database.build.mode}"
	 */
	protected String dbMode;
	
	public void execute() throws MojoExecutionException, MojoFailureException {
		createDatabaseScript();
	}
	
	/**
	 * 
	 */
	protected void createDatabaseScript(){
		FileOutputStream fos = null;
		Writer ostream = null;
		try{
			fos = new FileOutputStream(new File(sqlResourcesDir, "populate-database.sql"), true);
			ostream = new OutputStreamWriter(fos, "UTF-8");
			BufferedWriter output = new BufferedWriter(ostream);
			List<File> sqlFiles = getSqlFiles();
			for(File file : sqlFiles){
				InputStream input = null;
				try{
					input = new FileInputStream(file);
					output.newLine();
					output.newLine();
					IOUtils.copy(new StringReader("-- File: " + file.getName()), output);
					output.newLine();
					IOUtils.copy(input, output, "UTF-8");
				}
				catch(Exception e){
					throw new MojoExecutionException("Failed to append file: " + file.getName() + " to output file", e);
				}
				finally{
					IOUtils.closeQuietly(input);
				}
			}
			output.flush();

		}
		catch(Exception e){
			getLog().error(e.getMessage(), e);
		} 
		finally {
			if (fos != null) {
				IOUtils.closeQuietly(fos);
			}
			if (ostream != null) {
				IOUtils.closeQuietly(ostream);
			}
		}
	}
	
	/**
	 * Get SQL file for schema and content.
	 * @return
	 * @throws Exception
	 */
	protected List getSqlFiles() throws Exception{
         File scriptDir = getSourceDir();
         File scriptSchemaDir = getSchemDir();   
         
		 getLog().info("scarab.database.build.mode=" + dbMode);
         
         File[] schemaSqlFiles = {// sql schema files, generated by torque:sql
        		 new File(scriptSchemaDir, "turbine-schema.sql"),
        		 new File(scriptSchemaDir, "scarab-schema.sql"), 
        		 new File(scriptSchemaDir, "id_table-schema.sql")
         };
         File[] basicSqlFiles = {// content sql files from scr/sql
        		 new File(scriptDir, "turbine-id-table-init.sql"),
        		 new File(scriptDir, "scarab-id-table-init.sql"), 
        		 new File(scriptDir, "scarab-security.sql"),
        		 new File(scriptDir, "scarab-required-data.sql"),
        		 new File(scriptDir, "scarab-anonymous.sql")};
         
         File[] preconfiguredSqlFiles = {
        		 new File(scriptDir, "scarab-default-data.sql")
         };
         File[] sampleSqlFiles = {
        		 new File(scriptDir, "scarab-sample-data.sql"),
        		};
         File[] jiraSqlFiles = {
        		 new File(scriptDir, "scarab-jira-templates-data.sql"),
        		};
         
         List sqlFiles = null;    
         sqlFiles = new ArrayList(Arrays.asList(schemaSqlFiles));
         sqlFiles.addAll(new ArrayList(Arrays.asList(basicSqlFiles)));
         if(dbMode.indexOf("default") != -1){
        	 sqlFiles.addAll(new ArrayList(Arrays.asList(preconfiguredSqlFiles)));
         }
         else if(dbMode.indexOf("sample") != -1){
        	 sqlFiles.addAll(new ArrayList(Arrays.asList(preconfiguredSqlFiles)));
        	 sqlFiles.addAll(new ArrayList(Arrays.asList(sampleSqlFiles)));
         }
         
         if(dbMode.indexOf("_jira") != -1){
        	 sqlFiles.addAll(new ArrayList(Arrays.asList(jiraSqlFiles)));
         }
         
         return sqlFiles;
	}
	
	protected File getSourceDir() throws Exception{
		 File srcDir = new File(sqlSrcDir);
		 if(!srcDir.exists()){
	          	throw new MojoExecutionException("Files for data in '" + sqlSrcDir + "' not found.");
	     } 
		 return srcDir;
	}
	
	protected File getSchemDir() throws Exception{
		 File scriptSchemaDir = new File(sqlSchemaDir);
		 if(!scriptSchemaDir.exists()){
	          	throw new MojoExecutionException("Files for schema in '" + sqlSchemaDir + "' not found.");
	     } 
		 return scriptSchemaDir;
	}

}
