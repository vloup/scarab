<?xml version="1.0"?>

<!-- ===================================================================== -->
<!--                                                                       -->
<!-- Build file for Scarab                                                 -->
<!-- =====================                                                 -->
<!--                                                                       -->
<!-- Quickstep docu:                                                       -->
<!-- ant deploy        generate om, compile, create a functional webapp in -->
<!--                   target/scarab                                       -->
<!--                                                                       -->
<!-- subordinate tasks (usefull for developers only)                       -->
<!-- ant compile       generate om and compile. Place results into         -->
<!--                   scarab/target/scarab/WEB-INF/classes                -->
<!-- ant generate-om   generate the object model (om), merge results into  -->
<!--                   scarab/src/java/org/tigris/scarab/om/...            -->
<!-- ===================================================================== -->

<project name="Scarab" default="deploy" basedir="..">
     <!-- The basedir has to be the parent directory 
          because the junit-tests require it.
     -->

    <!-- Allow the user to have multiple configuration files and
         specify them using -Dconfiguration.file=filename 
         By default we load build.properties.     
    -->         
    <property name="configuration.file" value="build.properties"/>

    <property name="root.dir" value="."/>
    
    <property file="${root.dir}/wizzard.properties"/>
    <property file="${root.dir}/${configuration.file}"/>
    <property file="${root.dir}/project.properties" />

    <property name="ant.home" value="${root.dir}"/>
    <property name="tomcat.home" value="${root.dir}/tomcat"/>

    <property name="final.name" value="${project}-${version}"/>
    <property name="final.dir" value="${root.dir}/${final.name}/"/>

    <property name="src.conf.dir" value="${src.dir}/conf"/>
    <property name="src.java.dir.scarab" value="${src.dir}/java"/>
    <property name="src.sql.dir" value="${src.dir}/sql"/>
    <property name="src.schema.dir" value="${src.dir}/schema"/>
    <property name="src.webapp.dir" value="${src.dir}/webapp"/>
    <property name="src.webinf.dir" value="${src.webapp.dir}/WEB-INF"/>
    <property name="src.templates.dir" value="${src.webinf.dir}/templates"/>    
    <property name="src.test.dir" value="${src.dir}/test"/>

    <property name="build.dest.test" value="${build.dir}/test-classes"/>
    <property name="reports.dest.test" value="${build.dir}/test-reports"/>
    <property name="torquedoc.destdir" value="${build.dir}/torquedoc"/>
    <property name="scarab.war.file.dir" value="${build.dir}"/>
    <property name="scarab.war.file.name" value="scarab.war"/>
    <property name="scarab.war.file" value="${scarab.war.file.dir}/${scarab.war.file.name}"/>

    <property name="extensions.lib.dir" value="${extensions.dir}/usermods/lib"/>
    <property name="extensions.templates.dir" value="${extensions.dir}/usermods/templates"/>
    <property name="extensions.conf.dir" value="${extensions.dir}/usermods/conf"/>

    <property name="migration.dest.dir" value="${build.dir}/migration/classes"/>
    <property name="tomcat.dir" value="../tomcat"/>
    <property name="runtime.config.dir" value="${build.project}/WEB-INF/conf"/>
    <property name="repository.dir"     value="${root.dir}/www/repository"/>

    <!-- Build classpath -->
    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${ant.home}/lib">
            <include name="**/ant*.jar"/>
        </fileset>
        <fileset dir="${repository.dir}">
            <include name="*/jars/*.jar"/>
        </fileset>
    </path>

    <!-- ================================================================== -->
    <!-- Ensures, that the Build directory exists                           -->
    <!-- ================================================================== -->
    <target name="create-build-dir" >

        <echo message="Build Dir: ${build.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>
   

    <!-- ================================================================== -->
    <!-- Prepares the deploy directory                                     -->
    <!-- ================================================================== -->

    <target name="create-deployment-directory">

    <echo>
+-------------------------------------------------------------
|
| Bootstrap build for Scarab using configuration:
|
| Build directory ${build.project}
+-------------------------------------------------------------
        </echo>

        <!-- =============================== -->
        <!-- copy the core libraries (.jars) -->
        <!-- =============================== -->
        <mkdir dir="${build.project.webinf}/lib"/>
        <echo>lib.dir is [${lib.dir}]</echo>
        <echo>repository is [${repository.dir}]</echo>
        <copy todir="${build.project.webinf}/lib" filtering="no" flatten="true">
            <fileset dir="${repository.dir}">
                <exclude name="**/servlet*.jar"/>
                <exclude name="**/xalan*.jar"/>
                <include name="**/**.jar"/>
            </fileset>
        </copy>


        <!-- ====================================== -->
        <!-- Conditionally copy extension libraries -->
        <!-- ====================================== -->
        <available property="extensions.lib.exist" 
                   file="${extensions.lib.dir}"/>
        <antcall target="copy-lib-extensions"/>
        <echo>
+-------------------------------------------------------------
|
| Create the Scarab deployment target using configuration:
|
| Deploy directory ${build.project}
+-------------------------------------------------------------
        </echo>

        <!-- ======================================= -->        
        <echo> copy the webapplication framework ... </echo>      
        <!-- ======================================= -->        
        <copy todir="${build.project}" filtering="no">
            <fileset dir="${src.dir}/webapp">
                <include name="WEB-INF/tld/**/*"/>
                <include name="WEB-INF/server-config.wsdd"/>
                <include name="WEB-INF/web.xml"/>
                <include name="docs/*"/>
                <include name="images/*"/>
                <include name="scripts/*"/>
                <include name="style/*"/>
                <include name="index.html"/>
                <include name="index.jsp"/>
            </fileset>
        </copy>
        

        <tstamp/>

        <!-- ======================================= -->        
        <echo> copy the base configuration files ...   </echo>      
        <!-- ======================================= -->        
        <copy todir="${build.project.webinf}/conf" filtering="true">
             <fileset dir="${src.dir}/conf/conf">
                 <include name="**/*.*"/>
             </fileset>
             <filterset>
                 <filter token="SCARAB_MODULE_CODE_LENGTH" value="${scarab.module.code.length}"/>
                 <filter token="VERSION" value="${version}"/>
                 <filter token="BUILD_DATE" value="${DSTAMP}${TSTAMP}"/>
             </filterset>
        </copy>

        <!-- ==================================== -->        
        <echo> copy the database source files      </echo>      
        <!-- ==================================== -->        
        <copy todir="${build.project}/sql/all">
            <fileset dir="${src.dir}/sql"/>
        </copy>

        <!-- ======================================== -->
        <echo> Ensure, that the custom.properties exist </echo>
    	<!-- possibly creates an empty file           -->
        <!-- ======================================== -->
        <touch file="${build.project.webinf}/conf/custom.properties"/>

        <!-- Conditionally copy templates -->
        <antcall target="copy-templates" />

        <!-- Conditionally copy extension conf -->
        <available property="extensions.conf.exist"
                   file="${extensions.conf.dir}"/>
        <antcall target="copy-conf-extensions"/>

        
        <!-- Make all shell scripts executable -->
        <chmod perm="+x">
            <fileset dir="${src.sql.dir}" includes="**/*.sh"/>
        </chmod>
        
        <!-- copy resources to the classes directory -->
        <copy todir="${build.project.webinf}/classes" 
              filtering="no"
              preservelastmodified="yes">
            <fileset dir="${src.conf.dir}/classes"/>
        </copy>

    </target>


    <target name="create-custom-property-file" 
            description="Generate custom property file" 
            depends="create-deployment-directory">
        <taskdef
            name="defaultCustom" 
            classname="org.tigris.scarab.util.build.AntPropertyFileGenerator" 
            classpath="${build.project.webinf}/classes"/>
        <defaultCustom
            custom     = "${basedir}/${build.project.webinf}/conf/defaultCustom.properties"
            template   = "${basedir}/${custom.properties.tmpl}"
            properties = "${user.home}/scarab.${configuration.file}:${user.home}/${configuration.file}:${basedir}/${root.dir}/${configuration.file}:${basedir}/${root.dir}/project.properties" 
        />

    </target>

    <!-- conditional file copy used in prepare target-->
    <target name="copy-conf-extensions" if="extensions.conf.exist">
        <copy todir="${build.project.webinf}" filtering="yes"
              overwrite="true"
              verbose="true">
            <fileset dir="${extensions.conf.dir}/">
                <include name="web.xml"/>
                <include name="server-config.wsdd"/>
            </fileset>
        </copy>
    </target>
    <target name="copy-lib-extensions" if="extensions.lib.exist">
        <copy todir="${build.project.webinf}/lib" filtering="no"
              overwrite="true"
              verbose="true">
            <fileset dir="${extensions.lib.dir}/">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Copies templates to WEB-INF directory, if specified                -->
    <!-- ================================================================== -->
    <target name="copy-templates">
        <copy todir="${build.project.webinf}/templates" filtering="no">
            <fileset dir="${src.templates.dir}"/>
            <filterset>
              <filter token="SCARAB_MODULE_CODE_LENGTH" value="${scarab.module.code.length}"/>
            </filterset>
        </copy>
        <available property="extension.templates.exist" 
                   file="${extensions.templates.dir}"/>
        <antcall target="copy-template-extensions"/>
    </target>

    <target name="copy-template-extensions" if="extension.templates.exist">
        <copy todir="${build.project.webinf}/templates" filtering="no"
              overwrite="true"
              verbose="true">
            <fileset dir="${extensions.templates.dir}"/>
            <filterset>
              <filter token="SCARAB_MODULE_CODE_LENGTH" value="${scarab.module.code.length}"/>
            </filterset>
        </copy>
    </target>
        
    <!-- ================================================================== -->
    <!-- Generate OM/Peer classes from Torque                               -->
    <!-- Main target: generate-om                                      -->
    <!-- ================================================================== -->
    <target name="check-om-uptodate" depends="create-build-dir">
        <uptodate property="om.uptodate"
                  targetfile="${src.java.dir.scarab}/report.scarab.om.generation">
            <srcfiles dir="${src.schema.dir}"
                      includes="${scarab.torque.schemas}"/>
        </uptodate>
    </target>

    <target name="generate-om" depends="check-om-uptodate" 
            unless="om.uptodate">

        <ant antfile="build-torque.xml" target="om" inheritAll="false" dir="build">
            <property name="lib.dir"                  value="../${repository.dir}"/>
            <property name="torque.schema.dir"        value="../${src.schema.dir}"/>
            <property name="torque.java.dir"          value="../${src.java.dir.scarab}"/>
            <property name="torque.contextProperties" value="../${src.conf.dir}/torque.static.props"/>
            <property name="torque.database"          value="default"/>
        </ant>

    </target>

    <!-- ================================================================== -->
    <!-- Generate SQL from Torque for a specified database type. Set the    -->
    <!-- generatesql.database.type property when calling this target to     -->
    <!-- specify the required database type.                                -->
    <!-- ================================================================== -->
    <target name="sql-specific-db" depends="check-sql-uptodate"
            unless="sql.uptodate">
        
        <ant antfile="build-torque.xml" target="sql" inheritAll="false" dir="build">
            <property name="lib.dir"                  value="../${repository.dir}"/>
            <property name="torque.schema.dir"        value="../${src.schema.dir}"/>
            <property name="torque.sql.dir"           value="../${build.project}/sql/all/${generatesql.database.type}"/>
            <property name="torque.contextProperties" value="../${src.conf.dir}/torque.static.props"/>
            <property name="torque.database"          value="${generatesql.database.type}"/>
        </ant>
                    
    </target>

    <target name="check-sql-uptodate">
        <echo message="check sql for ${generatesql.database.type}" />
        <uptodate property="sql.uptodate"
                  targetfile="${build.project}/sql/all/${generatesql.database.type}/report.scarab.sql.generation">
            <srcfiles dir="${src.schema.dir}"
                      includes="${scarab.torque.schemas}"/>
        </uptodate>
    </target>

    <target name="generate-sql" depends="create-build-dir">
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="${scarab.database.type}"/>
        </antcall>
    </target>

    <target name="generate-all-sql" depends="create-build-dir">
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="db2"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="hypersonic"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="mysql"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="mssql"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="oracle"/>
        </antcall>
        <antcall target="sql-specific-db">
            <param name="generatesql.database.type" value="postgresql"/>
        </antcall>
    </target>

    <!-- ================================================================== -->
    <!-- Create database                                                    -->
    <!-- ================================================================== -->
    <target name="create-db" depends="compile,generate-sql,create-custom-property-file">
    
        <ant antfile="build.xml"
             target="create-db" 
        	 inheritAll="false"
        	 dir="${runtime.config.dir}">
        </ant>
    
    </target>

    <target name="migrate-from-b20" description="migrate from b20 to b21">        
        <ant antfile="build.xml"
             target="migrate-from-b20" 
             inheritAll="false"
             dir="${runtime.config.dir}">
        </ant>        
    </target>
    
    <target name="migrate-workflow" description="Make changes to an existing b19 system, keeping the data, to allow migration to cheapworklow">
        <sql
            driver="${scarab.database.jdbc.driver}"
            url="${scarab.database.url}"
            userid="${scarab.database.admin.username}"
            password="${scarab.database.admin.password}"
	    onerror="continue">
            <classpath refid="classpath"/>
	<transaction src="${src.sql.dir}/upgrade/${scarab.database.type}-upgrade-1.0b19-workflow-1.sql"/>
	<transaction src="${src.sql.dir}/upgrade/${scarab.database.type}-upgrade-1.0b19-workflow-2.sql"/>
	<transaction src="${src.sql.dir}/upgrade/${scarab.database.type}-upgrade-1.0b19-workflow-3.sql"/>
        </sql>
    </target>

    <target name="migrate-from-b19" description="migrate from b19 to b20">        
        <ant antfile="build.xml"
             target="migrate-from-b19" 
             inheritAll="false"
             dir="${runtime.config.dir}">
        </ant>        
    </target>

    <target name="migrate-from-a20" description="migrate from a20 to b20">        
        <ant antfile="build.xml"
             target="migrate-from-a20" 
             inheritAll="false"
             dir="${runtime.config.dir}">
        </ant>        
    </target>
	
    <!-- ================================================================== -->
    <!-- Deploys the webapp into target/scarab                              -->
    <!-- ================================================================== -->
    <target name="deploy" depends="compile,generate-sql,create-custom-property-file" />

    <!-- ================================================================== -->
    <!-- Compiles the source directory                                      -->
    <!-- ================================================================== -->
    <target name="compile" depends="generate-om,create-deployment-directory">
        <mkdir dir="${build.dest.scarab}"/>
        <javac srcdir="${src.java.dir.scarab}"
               destdir="${build.dest.scarab}"
               debug="on"
               deprecation="off"
               optimize="off">
            <classpath refid="classpath"/>
            <classpath>
                <fileset dir="${build.project.webinf.lib}">
                    <include name="**/torque*.jar"/>
                </fileset>
            </classpath>
            <exclude name="**/package.html"/>
            <exclude name="torque/**"/>
        </javac>
    </target>



    <!-- ================================================================== -->
    <!-- Cleans up the build directory                                      -->
    <!-- ================================================================== -->
    <target name="clean" depends="create-build-dir, remove-generation">
        <delete dir="${build.dir}" quiet="true"/>
        <delete quiet="true">
            <fileset dir="${src.java.dir.scarab}/org/tigris/scarab/om">
                <include name="Base*.java"/>
                <include name="map/*.java"/>
            </fileset>
            <fileset dir="${src.java.dir.scarab}">
                <include name="report.*.generation"/>
            </fileset>
        </delete>
        <delete quiet="true">
            <fileset dir="${tomcat.dir}">
                <include name="work"/>
                <include name="logs/*log*.txt"/>
            </fileset>
        </delete>
    </target>

    <!-- ================================================================== -->
    <!-- Create a war file                                                  -->
    <!-- ================================================================== -->
    <target name="war" depends="compile,create-custom-property-file">

        <war warfile="${scarab.war.file}"
              webxml="${build.project.webinf}/web.xml">

          <fileset dir="${build.project}">
            <exclude name="WEB-INF/web.xml"/>
            <exclude name="logs/**"/>
          </fileset>
        </war>
    </target>


	<!-- ============================================================= -->
    <!-- Targets below are for release maintenance only                -->
    <!-- ============================================================= -->

	
    <!-- ================================================================== -->
    <!-- Package (creates a .zip and .tar.gz)                               -->
    <!-- ================================================================== -->
    <target name="package" depends="package-zip,package-tgz">
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with ZIP                                 -->
    <!-- ================================================================== -->
    <target name="package-zip" depends="dist">
        <delete file="../${final.name}.zip" quiet="true" />
        <zip zipfile="../${final.name}.zip" 
             basedir="../" includes="**/${final.name}/**"/>
    </target>

    <!-- ================================================================== -->
    <!-- Packages the distribution with TAR-GZIP                            -->
    <!-- ================================================================== -->
    <target name="package-tgz" depends="dist">
        <delete file="../${final.name}.tar" quiet="true"/>
        <delete file="../${final.name}.tar.gz" quiet="true" />
        <tar longfile="gnu" tarfile="../${final.name}.tar" 
             basedir="../" includes="**/${final.name}/**"/>
        <gzip zipfile="../${final.name}.tar.gz" 
                  src="../${final.name}.tar"/>
        <delete file="../${final.name}.tar"/>
    </target>

    <!-- ================================================================== -->
    <!-- Creates the Binary distribution directory                          -->
    <!-- ================================================================== -->
    <target name="dist">
        <delete dir="${final.dir}" quiet="true" />
        <mkdir dir="${final.dir}"/>

        <copy todir="${final.dir}" preservelastmodified="true"
              includeEmptyDirs="false">

        	<fileset dir="../">
                <include name="**/tomcat/logs/README**"/>
                <include name="**/www/repository/**"/>
            </fileset>

        	<fileset dir="../">
                <exclude name="**/build/nightly.sh"/>
                <exclude name="**/build/run-tests*"/>
                <exclude name="**/build/velocity.log*"/>
                <exclude name="**/lib/jakarta-turbine-*.gz"/>
                <exclude name="**/src/sql/${scarab.database.type}-scarab.sql"/>
                <exclude name="**/src/sql/report.scarab.sql.generation"/>
                <exclude name="**/src/sql/project-schema.sql"/>
                <exclude name="**/src/sql/sqldb.map"/>
                <exclude name="**/src/sql/id-table-schema.sql"/>
                <exclude name="**/src/sql/*.DM1"/>
                <exclude name="**/src/sql/*.jpg"/>
                <exclude name="**/src/sql/schema-design-notes.txt"/>
                <exclude name="**/src/sql/sql_questions.txt"/>
                <!--<exclude name="**/src/test/**"/>-->
                <exclude name="**/target/**"/>
                <exclude name="**/tomcat/logs/**"/>
                <exclude name="**/www/**"/>
            </fileset>
        </copy>     

    </target>

    <target name="remove-generation" description="Remove torque generation files (forces torque to rebuild)">
        <delete file="${src.sql.dir}/report.scarab.sql.generation"/>
        <delete file="${src.java.dir.scarab}/report.scarab.om.generation"/>
        <delete file="${src.java.dir.scarab}/report.scarab.om.base.generation"/>
        <delete file="${src.dir}/report.scarab.datadtd.generation"/>
    </target>

   <target name="compile-test" description="compile test classes" depends="compile,generate-sql,create-custom-property-file">
        <mkdir dir="${build.dest.test}"/>
        <javac srcdir="${src.test.dir}"
               destdir="${build.dest.test}">
            <classpath refid="classpath"/>
            <classpath path="${build.dest.scarab}"/>
        </javac>
    </target>

   <target name="test" description="execute all tests" depends="compile-test">
      <mkdir dir="${reports.dest.test}"/>
      <!-- this works out of the box only with ant1.7.0 or higher
           (http://ant.apache.org/faq.html#delegating-classloader) -->
      <junit printsummary="true" 
             haltonfailure="true" 
             haltonerror="true" 
             fork="true" 
             forkmode="once"
             dir=".">
          <classpath refid="classpath"/>
          <classpath path="${build.dest.scarab}"/>
          <classpath path="${build.dest.test}"/>

          <formatter type="plain"/>
          <formatter type="xml"/>

          <batchtest todir="${reports.dest.test}">
             <fileset dir="${src.test.dir}">
                <include name="**/AllScarabTests.java"/>
             </fileset>
          </batchtest>
      </junit>
   </target>

   <target name="status-tomcat" description="check if the included tomcat is running">
      <condition property="tomcat.started">
         <socket server="localhost" port="${scarab.http.port}"/>
      </condition>
   </target>

   <target name="stop-tomcat" depends="status-tomcat" if="tomcat.started" description="stop the included tomcat">
      <java jar="${tomcat.home}/bin/bootstrap.jar" fork="true">
         <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
         <arg line="stop"/>
      </java>
   </target>

   <target name="start-tomcat" description="start the included tomcat">
      <java jar="${tomcat.home}/bin/bootstrap.jar" fork="true" spawn="true">
         <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
         <arg line="start"/>
      </java>
   </target>
</project>
