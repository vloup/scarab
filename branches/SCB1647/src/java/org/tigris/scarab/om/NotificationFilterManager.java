

package org.tigris.scarab.om;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.Persistent;
import org.tigris.scarab.notification.ActivityType;
import org.tigris.scarab.notification.NotificationManagerFactory;
import org.tigris.scarab.tools.localization.L10NKeySet;
import org.tigris.scarab.util.ScarabException;
import org.tigris.scarab.util.build.l10nchecker.L10nKey;

/**
 * This class manages NotificationFilter objects.
 * The skeleton for this class was autogenerated by Torque  * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public class NotificationFilterManager
    extends BaseNotificationFilterManager
{
    /**
     * Creates a new <code>NotificationFilterManager</code> instance.
     *
     * @exception TorqueException if an error occurs
     */
    public NotificationFilterManager()
        throws TorqueException
    {
        super();
    }
    
    public static NotificationFilter getNotificationFilter(NotificationStatus notif) throws ScarabException
    {
        NotificationFilter filter = null;
        try
        {
            Long issueId = notif.getIssueId();
            Issue issue = IssueManager.getInstance(issueId);
            Integer moduleId = issue.getModuleId();
            Integer userId = notif.getReceiverId();
            String activityType = notif.getActivityType();
            filter = getNotificationFilter(moduleId, userId, activityType);
        }
        catch(TorqueException te)
        {
            throw new ScarabException(L10NKeySet.ExceptionTorqueGeneric, te);
        }
        return filter;
    }
    
    public static NotificationFilter getNotificationFilter(Integer moduleId, Integer userId, String activityType) throws ScarabException
    {
        NotificationFilter filter = null;
        
        try
        {
            filter = NotificationFilter.createDefaultFilter( 
                        moduleId, 
                        userId,
                        NotificationManagerFactory.getInstance().getManagerId(),
                        ActivityType.getActivityType(activityType));
        }
        catch(TorqueException te)
        {
            throw new ScarabException(L10NKeySet.ExceptionTorqueGeneric,te);
        }

        ObjectKey pk = filter.getPrimaryKey();
        NotificationFilter result;
        try
        {
            result = NotificationFilterManager.getInstance(pk);
            if(result == null)
            {
                result = filter;
            }
        }
        catch(Exception e)
        {
            result = filter;
        }
        
        return result;
    }

    /**
     * determines whether user has enabled notifications for given activityType
     * in given module.
     * @param user
     * @param act
     * @return
     * @throws ScarabException 
     */
    public static boolean isNotificationEnabledFor(Integer moduleId, Integer userId, String activityType) throws ScarabException
    {
        NotificationFilter filter = getNotificationFilter(moduleId, userId, activityType);
        boolean result = filter.getFilterState();
        return result;
    }

    
}
